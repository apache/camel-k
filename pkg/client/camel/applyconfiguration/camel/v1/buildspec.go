/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BuildSpecApplyConfiguration represents an declarative configuration of the BuildSpec type for use
// with apply.
type BuildSpecApplyConfiguration struct {
	Tasks               []TaskApplyConfiguration              `json:"tasks,omitempty"`
	Configuration       *BuildConfigurationApplyConfiguration `json:"configuration,omitempty"`
	ToolImage           *string                               `json:"toolImage,omitempty"`
	BuilderPodNamespace *string                               `json:"operatorNamespace,omitempty"`
	Timeout             *metav1.Duration                      `json:"timeout,omitempty"`
	MaxRunningBuilds    *int32                                `json:"maxRunningBuilds,omitempty"`
}

// BuildSpecApplyConfiguration constructs an declarative configuration of the BuildSpec type for use with
// apply.
func BuildSpec() *BuildSpecApplyConfiguration {
	return &BuildSpecApplyConfiguration{}
}

// WithTasks adds the given value to the Tasks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tasks field.
func (b *BuildSpecApplyConfiguration) WithTasks(values ...*TaskApplyConfiguration) *BuildSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTasks")
		}
		b.Tasks = append(b.Tasks, *values[i])
	}
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *BuildSpecApplyConfiguration) WithConfiguration(value *BuildConfigurationApplyConfiguration) *BuildSpecApplyConfiguration {
	b.Configuration = value
	return b
}

// WithToolImage sets the ToolImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ToolImage field is set to the value of the last call.
func (b *BuildSpecApplyConfiguration) WithToolImage(value string) *BuildSpecApplyConfiguration {
	b.ToolImage = &value
	return b
}

// WithBuilderPodNamespace sets the BuilderPodNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BuilderPodNamespace field is set to the value of the last call.
func (b *BuildSpecApplyConfiguration) WithBuilderPodNamespace(value string) *BuildSpecApplyConfiguration {
	b.BuilderPodNamespace = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *BuildSpecApplyConfiguration) WithTimeout(value metav1.Duration) *BuildSpecApplyConfiguration {
	b.Timeout = &value
	return b
}

// WithMaxRunningBuilds sets the MaxRunningBuilds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxRunningBuilds field is set to the value of the last call.
func (b *BuildSpecApplyConfiguration) WithMaxRunningBuilds(value int32) *BuildSpecApplyConfiguration {
	b.MaxRunningBuilds = &value
	return b
}
