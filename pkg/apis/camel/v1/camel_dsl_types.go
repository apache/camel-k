// Code generated by schema-generate. DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"errors"
)

// OrgApacheCamelBuilderDefaultErrorHandlerBuilder
type OrgApacheCamelBuilderDefaultErrorHandlerBuilder struct {
	AsyncDelayedRedelivery bool `json:"async-delayed-redelivery,omitempty"`
	DeadLetterHandleNewException bool `json:"dead-letter-handle-new-exception,omitempty"`
	UseOriginalBody bool `json:"use-original-body,omitempty"`
	UseOriginalMessage bool `json:"use-original-message,omitempty"`
}

// OrgApacheCamelBuilderErrorHandlerBuilderRef
type OrgApacheCamelBuilderErrorHandlerBuilderRef struct {
	DeadLetterChannel interface{} `json:"dead-letter-channel,omitempty"`
	Log *OrgApacheCamelBuilderDefaultErrorHandlerBuilder `json:"log,omitempty"`
	None *OrgApacheCamelBuilderNoErrorHandlerBuilder `json:"none,omitempty"`
	Ref string `json:"ref,omitempty"`
}

// OrgApacheCamelBuilderNoErrorHandlerBuilder
type OrgApacheCamelBuilderNoErrorHandlerBuilder struct {
}

// OrgApacheCamelDslYamlDeserializersNamedBeanDefinition
type OrgApacheCamelDslYamlDeserializersNamedBeanDefinition struct {
	Name string `json:"name"`
	Properties *Properties `json:"properties,omitempty"`
	Type string `json:"type"`
}

// OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition
type OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition struct {
	Parameters *Parameters `json:"parameters,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
	Uri string `json:"uri"`
}

// OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer
type OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer struct {
	Parameters *Parameters `json:"parameters,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
	Uri string `json:"uri"`
}

// OrgApacheCamelModelAggregateDefinition
type OrgApacheCamelModelAggregateDefinition struct {
	AggregateControllerRef string `json:"aggregate-controller-ref,omitempty"`
	AggregationRepositoryRef string `json:"aggregation-repository-ref,omitempty"`
	CloseCorrelationKeyOnCompletion float64 `json:"close-correlation-key-on-completion,omitempty"`
	CompleteAllOnStop bool `json:"complete-all-on-stop,omitempty"`
	CompletionFromBatchConsumer bool `json:"completion-from-batch-consumer,omitempty"`
	CompletionInterval string `json:"completion-interval,omitempty"`
	CompletionOnNewCorrelationGroup bool `json:"completion-on-new-correlation-group,omitempty"`
	CompletionPredicate *OrgApacheCamelModelExpressionSubElementDefinition `json:"completion-predicate,omitempty"`
	CompletionSize float64 `json:"completion-size,omitempty"`
	CompletionSizeExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"completion-size-expression,omitempty"`
	CompletionTimeout string `json:"completion-timeout,omitempty"`
	CompletionTimeoutCheckerInterval string `json:"completion-timeout-checker-interval,omitempty"`
	CompletionTimeoutExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"completion-timeout-expression,omitempty"`
	CorrelationExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"correlation-expression,omitempty"`
	DiscardOnAggregationFailure bool `json:"discard-on-aggregation-failure,omitempty"`
	DiscardOnCompletionTimeout bool `json:"discard-on-completion-timeout,omitempty"`
	EagerCheckCompletion bool `json:"eager-check-completion,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	ForceCompletionOnStop bool `json:"force-completion-on-stop,omitempty"`
	IgnoreInvalidCorrelationKeys bool `json:"ignore-invalid-correlation-keys,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OptimisticLockRetryPolicy *OrgApacheCamelModelOptimisticLockRetryPolicyDefinition `json:"optimistic-lock-retry-policy,omitempty"`
	OptimisticLocking bool `json:"optimistic-locking,omitempty"`
	ParallelProcessing bool `json:"parallel-processing,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	StrategyMethodAllowNull bool `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
	TimeoutCheckerExecutorServiceRef string `json:"timeout-checker-executor-service-ref,omitempty"`
}

// OrgApacheCamelModelCatchDefinition
type OrgApacheCamelModelCatchDefinition struct {
	Exception []string `json:"exception,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnWhen *OrgApacheCamelModelWhenDefinition `json:"on-when,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelChoiceDefinition
type OrgApacheCamelModelChoiceDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Otherwise *OrgApacheCamelModelOtherwiseDefinition `json:"otherwise,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	When []*OrgApacheCamelModelWhenDefinition `json:"when,omitempty"`
}

// OrgApacheCamelModelCircuitBreakerDefinition
type OrgApacheCamelModelCircuitBreakerDefinition struct {
	ConfigurationRef string `json:"configuration-ref,omitempty"`
	FaultToleranceConfiguration *OrgApacheCamelModelFaultToleranceConfigurationDefinition `json:"fault-tolerance-configuration,omitempty"`
	HystrixConfiguration *OrgApacheCamelModelHystrixConfigurationDefinition `json:"hystrix-configuration,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnFallback *OrgApacheCamelModelOnFallbackDefinition `json:"on-fallback,omitempty"`
	Resilience4jConfiguration *OrgApacheCamelModelResilience4jConfigurationDefinition `json:"resilience4j-configuration,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelClaimCheckDefinition
type OrgApacheCamelModelClaimCheckDefinition struct {
	Filter string `json:"filter,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Key string `json:"key,omitempty"`
	Operation string `json:"operation"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
}

// OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Servers []string `json:"servers,omitempty"`
}

// OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration struct {
	CombinedServiceDiscovery *OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration `json:"combined-service-discovery,omitempty"`
	ConsulServiceDiscovery *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration `json:"consul-service-discovery,omitempty"`
	DnsServiceDiscovery *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration `json:"dns-service-discovery,omitempty"`
	EtcdServiceDiscovery *OrgApacheCamelModelCloudEtcdServiceCallServiceDiscoveryConfiguration `json:"etcd-service-discovery,omitempty"`
	Id string `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetes-service-discovery,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	StaticServiceDiscovery *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration `json:"static-service-discovery,omitempty"`
	Timeout float64 `json:"timeout,omitempty"`
	Units string `json:"units,omitempty"`
}

// OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration struct {
	CachingServiceDiscovery *OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration `json:"caching-service-discovery,omitempty"`
	ConsulServiceDiscovery *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration `json:"consul-service-discovery,omitempty"`
	DnsServiceDiscovery *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration `json:"dns-service-discovery,omitempty"`
	EtcdServiceDiscovery *OrgApacheCamelModelCloudEtcdServiceCallServiceDiscoveryConfiguration `json:"etcd-service-discovery,omitempty"`
	Id string `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetes-service-discovery,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	StaticServiceDiscovery *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration `json:"static-service-discovery,omitempty"`
}

// OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration struct {
	BlacklistServiceFilter *OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration `json:"blacklist-service-filter,omitempty"`
	CustomServiceFilter *OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration `json:"custom-service-filter,omitempty"`
	HealthyServiceFilter *OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration `json:"healthy-service-filter,omitempty"`
	Id string `json:"id,omitempty"`
	PassThroughServiceFilter *OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration `json:"pass-through-service-filter,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration struct {
	AclToken string `json:"acl-token,omitempty"`
	BlockSeconds float64 `json:"block-seconds,omitempty"`
	ConnectTimeoutMillis float64 `json:"connect-timeout-millis,omitempty"`
	Datacenter string `json:"datacenter,omitempty"`
	Id string `json:"id,omitempty"`
	Password string `json:"password,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	ReadTimeoutMillis float64 `json:"read-timeout-millis,omitempty"`
	Url string `json:"url,omitempty"`
	UserName string `json:"user-name,omitempty"`
	WriteTimeoutMillis float64 `json:"write-timeout-millis,omitempty"`
}

// OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Ref string `json:"ref,omitempty"`
}

// OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration
type OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration struct {
	Domain string `json:"domain,omitempty"`
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Proto string `json:"proto,omitempty"`
}

// OrgApacheCamelModelCloudEtcdServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudEtcdServiceCallServiceDiscoveryConfiguration struct {
	Id string `json:"id,omitempty"`
	Password string `json:"password,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	ServicePath string `json:"service-path,omitempty"`
	Timeout float64 `json:"timeout,omitempty"`
	Type string `json:"type,omitempty"`
	Uris string `json:"uris,omitempty"`
	UserName string `json:"user-name,omitempty"`
}

// OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration struct {
	ApiVersion string `json:"api-version,omitempty"`
	CaCertData string `json:"ca-cert-data,omitempty"`
	CaCertFile string `json:"ca-cert-file,omitempty"`
	ClientCertData string `json:"client-cert-data,omitempty"`
	ClientCertFile string `json:"client-cert-file,omitempty"`
	ClientKeyAlgo string `json:"client-key-algo,omitempty"`
	ClientKeyData string `json:"client-key-data,omitempty"`
	ClientKeyFile string `json:"client-key-file,omitempty"`
	ClientKeyPassphrase string `json:"client-key-passphrase,omitempty"`
	DnsDomain string `json:"dns-domain,omitempty"`
	Id string `json:"id,omitempty"`
	Lookup string `json:"lookup,omitempty"`
	MasterUrl string `json:"master-url,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	OauthToken string `json:"oauth-token,omitempty"`
	Password string `json:"password,omitempty"`
	PortName string `json:"port-name,omitempty"`
	PortProtocol string `json:"port-protocol,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	TrustCerts bool `json:"trust-certs,omitempty"`
	Username string `json:"username,omitempty"`
}

// OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudRibbonServiceCallServiceLoadBalancerConfiguration
type OrgApacheCamelModelCloudRibbonServiceCallServiceLoadBalancerConfiguration struct {
	ClientName string `json:"client-name,omitempty"`
	Id string `json:"id,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	Password string `json:"password,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Username string `json:"username,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallConfigurationDefinition
type OrgApacheCamelModelCloudServiceCallConfigurationDefinition struct {
	BlacklistServiceFilter *OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration `json:"blacklist-service-filter,omitempty"`
	CachingServiceDiscovery *OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration `json:"caching-service-discovery,omitempty"`
	CombinedServiceDiscovery *OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration `json:"combined-service-discovery,omitempty"`
	CombinedServiceFilter *OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration `json:"combined-service-filter,omitempty"`
	Component string `json:"component,omitempty"`
	ConsulServiceDiscovery *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration `json:"consul-service-discovery,omitempty"`
	CustomServiceFilter *OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration `json:"custom-service-filter,omitempty"`
	DefaultLoadBalancer *OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration `json:"default-load-balancer,omitempty"`
	DnsServiceDiscovery *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration `json:"dns-service-discovery,omitempty"`
	EtcdServiceDiscovery *OrgApacheCamelModelCloudEtcdServiceCallServiceDiscoveryConfiguration `json:"etcd-service-discovery,omitempty"`
	Expression *OrgApacheCamelModelCloudServiceCallExpressionConfiguration `json:"expression,omitempty"`
	ExpressionRef string `json:"expression-ref,omitempty"`
	HealthyServiceFilter *OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration `json:"healthy-service-filter,omitempty"`
	Id string `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetes-service-discovery,omitempty"`
	LoadBalancerRef string `json:"load-balancer-ref,omitempty"`
	PassThroughServiceFilter *OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration `json:"pass-through-service-filter,omitempty"`
	Pattern string `json:"pattern,omitempty"`
	RibbonLoadBalancer *OrgApacheCamelModelCloudRibbonServiceCallServiceLoadBalancerConfiguration `json:"ribbon-load-balancer,omitempty"`
	ServiceChooserRef string `json:"service-chooser-ref,omitempty"`
	ServiceDiscoveryRef string `json:"service-discovery-ref,omitempty"`
	ServiceFilterRef string `json:"service-filter-ref,omitempty"`
	StaticServiceDiscovery *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration `json:"static-service-discovery,omitempty"`
	Uri string `json:"uri,omitempty"`
	ZookeeperServiceDiscovery *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration `json:"zookeeper-service-discovery,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallExpressionConfiguration
type OrgApacheCamelModelCloudServiceCallExpressionConfiguration struct {
	ExpressionType *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression-type,omitempty"`
	HostHeader string `json:"host-header,omitempty"`
	Id string `json:"id,omitempty"`
	PortHeader string `json:"port-header,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceChooserConfiguration
type OrgApacheCamelModelCloudServiceCallServiceChooserConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudServiceCallServiceDiscoveryConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudServiceCallServiceFilterConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceLoadBalancerConfiguration
type OrgApacheCamelModelCloudServiceCallServiceLoadBalancerConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration struct {
	Id string `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Servers []string `json:"servers,omitempty"`
}

// OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration struct {
	BasePath string `json:"base-path"`
	ConnectionTimeout string `json:"connection-timeout,omitempty"`
	Id string `json:"id,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	Nodes string `json:"nodes"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	ReconnectBaseSleepTime string `json:"reconnect-base-sleep-time,omitempty"`
	ReconnectMaxRetries string `json:"reconnect-max-retries,omitempty"`
	ReconnectMaxSleepTime string `json:"reconnect-max-sleep-time,omitempty"`
	SessionTimeout string `json:"session-timeout,omitempty"`
}

// OrgApacheCamelModelConfigBatchResequencerConfig
type OrgApacheCamelModelConfigBatchResequencerConfig struct {
	AllowDuplicates bool `json:"allow-duplicates,omitempty"`
	BatchSize float64 `json:"batch-size,omitempty"`
	BatchTimeout string `json:"batch-timeout,omitempty"`
	IgnoreInvalidExchanges bool `json:"ignore-invalid-exchanges,omitempty"`
	Reverse bool `json:"reverse,omitempty"`
}

// OrgApacheCamelModelConfigStreamResequencerConfig
type OrgApacheCamelModelConfigStreamResequencerConfig struct {
	Capacity float64 `json:"capacity,omitempty"`
	ComparatorRef string `json:"comparator-ref,omitempty"`
	DeliveryAttemptInterval string `json:"delivery-attempt-interval,omitempty"`
	IgnoreInvalidExchanges bool `json:"ignore-invalid-exchanges,omitempty"`
	RejectOld bool `json:"reject-old,omitempty"`
	Timeout string `json:"timeout,omitempty"`
}

// OrgApacheCamelModelContextScanDefinition
type OrgApacheCamelModelContextScanDefinition struct {
	Excludes []string `json:"excludes,omitempty"`
	IncludeNonSingletons bool `json:"include-non-singletons,omitempty"`
	Includes []string `json:"includes,omitempty"`
}

// OrgApacheCamelModelDataFormatDefinition
type OrgApacheCamelModelDataFormatDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatBarcodeDataFormat
type OrgApacheCamelModelDataformatBarcodeDataFormat struct {
	BarcodeFormat string `json:"barcode-format,omitempty"`
	Height float64 `json:"height,omitempty"`
	Id string `json:"id,omitempty"`
	ImageType string `json:"image-type,omitempty"`
	Width float64 `json:"width,omitempty"`
}

// OrgApacheCamelModelDataformatBase64DataFormat
type OrgApacheCamelModelDataformatBase64DataFormat struct {
	Id string `json:"id,omitempty"`
	LineLength float64 `json:"line-length,omitempty"`
	LineSeparator string `json:"line-separator,omitempty"`
	UrlSafe bool `json:"url-safe,omitempty"`
}

// OrgApacheCamelModelDataformatBeanioDataFormat
type OrgApacheCamelModelDataformatBeanioDataFormat struct {
	BeanReaderErrorHandlerType string `json:"bean-reader-error-handler-type,omitempty"`
	Encoding string `json:"encoding,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreInvalidRecords bool `json:"ignore-invalid-records,omitempty"`
	IgnoreUnexpectedRecords bool `json:"ignore-unexpected-records,omitempty"`
	IgnoreUnidentifiedRecords bool `json:"ignore-unidentified-records,omitempty"`
	Mapping string `json:"mapping"`
	StreamName string `json:"stream-name"`
	UnmarshalSingleObject bool `json:"unmarshal-single-object,omitempty"`
}

// OrgApacheCamelModelDataformatBindyDataFormat
type OrgApacheCamelModelDataformatBindyDataFormat struct {
	AllowEmptyStream bool `json:"allow-empty-stream,omitempty"`
	ClassType string `json:"class-type,omitempty"`
	Id string `json:"id,omitempty"`
	Locale string `json:"locale,omitempty"`
	Type string `json:"type"`
	UnwrapSingleInstance bool `json:"unwrap-single-instance,omitempty"`
}

// OrgApacheCamelModelDataformatCBORDataFormat
type OrgApacheCamelModelDataformatCBORDataFormat struct {
	AllowJmsType bool `json:"allow-jms-type,omitempty"`
	AllowUnmarshallType bool `json:"allow-unmarshall-type,omitempty"`
	CollectionType string `json:"collection-type,omitempty"`
	DisableFeatures string `json:"disable-features,omitempty"`
	EnableFeatures string `json:"enable-features,omitempty"`
	Id string `json:"id,omitempty"`
	ObjectMapper string `json:"object-mapper,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	UnmarshalType string `json:"unmarshal-type,omitempty"`
	UseDefaultObjectMapper bool `json:"use-default-object-mapper,omitempty"`
	UseList bool `json:"use-list,omitempty"`
}

// OrgApacheCamelModelDataformatCryptoDataFormat
type OrgApacheCamelModelDataformatCryptoDataFormat struct {
	Algorithm string `json:"algorithm,omitempty"`
	AlgorithmParameterRef string `json:"algorithm-parameter-ref,omitempty"`
	Buffersize float64 `json:"buffersize,omitempty"`
	CryptoProvider string `json:"crypto-provider,omitempty"`
	Id string `json:"id,omitempty"`
	InitVectorRef string `json:"init-vector-ref,omitempty"`
	Inline bool `json:"inline,omitempty"`
	KeyRef string `json:"key-ref,omitempty"`
	MacAlgorithm string `json:"mac-algorithm,omitempty"`
	ShouldAppendHmac bool `json:"should-append-hmac,omitempty"`
}

// OrgApacheCamelModelDataformatDataFormatsDefinition
type OrgApacheCamelModelDataformatDataFormatsDefinition struct {
	Any23 interface{} `json:"any23,omitempty"`
	Asn1 interface{} `json:"asn1,omitempty"`
	Avro interface{} `json:"avro,omitempty"`
	Barcode *OrgApacheCamelModelDataformatBarcodeDataFormat `json:"barcode,omitempty"`
	Base64 *OrgApacheCamelModelDataformatBase64DataFormat `json:"base64,omitempty"`
	Beanio *OrgApacheCamelModelDataformatBeanioDataFormat `json:"beanio,omitempty"`
	Bindy *OrgApacheCamelModelDataformatBindyDataFormat `json:"bindy,omitempty"`
	Cbor *OrgApacheCamelModelDataformatCBORDataFormat `json:"cbor,omitempty"`
	Crypto *OrgApacheCamelModelDataformatCryptoDataFormat `json:"crypto,omitempty"`
	Csv interface{} `json:"csv,omitempty"`
	Custom interface{} `json:"custom,omitempty"`
	FhirJson *OrgApacheCamelModelDataformatFhirJsonDataFormat `json:"fhir-json,omitempty"`
	FhirXml *OrgApacheCamelModelDataformatFhirXmlDataFormat `json:"fhir-xml,omitempty"`
	Flatpack *OrgApacheCamelModelDataformatFlatpackDataFormat `json:"flatpack,omitempty"`
	Grok *OrgApacheCamelModelDataformatGrokDataFormat `json:"grok,omitempty"`
	Gzip *OrgApacheCamelModelDataformatGzipDataFormat `json:"gzip,omitempty"`
	Hl7 *OrgApacheCamelModelDataformatHL7DataFormat `json:"hl7,omitempty"`
	Ical *OrgApacheCamelModelDataformatIcalDataFormat `json:"ical,omitempty"`
	Jacksonxml *OrgApacheCamelModelDataformatJacksonXMLDataFormat `json:"jacksonxml,omitempty"`
	Jaxb *OrgApacheCamelModelDataformatJaxbDataFormat `json:"jaxb,omitempty"`
	Json *OrgApacheCamelModelDataformatJsonDataFormat `json:"json,omitempty"`
	JsonApi *OrgApacheCamelModelDataformatJsonApiDataFormat `json:"json-api,omitempty"`
	Lzf *OrgApacheCamelModelDataformatLZFDataFormat `json:"lzf,omitempty"`
	MimeMultipart *OrgApacheCamelModelDataformatMimeMultipartDataFormat `json:"mime-multipart,omitempty"`
	Pgp *OrgApacheCamelModelDataformatPGPDataFormat `json:"pgp,omitempty"`
	Protobuf interface{} `json:"protobuf,omitempty"`
	Rss *OrgApacheCamelModelDataformatRssDataFormat `json:"rss,omitempty"`
	SecureXml *OrgApacheCamelModelDataformatXMLSecurityDataFormat `json:"secure-xml,omitempty"`
	Soapjaxb interface{} `json:"soapjaxb,omitempty"`
	Syslog *OrgApacheCamelModelDataformatSyslogDataFormat `json:"syslog,omitempty"`
	Tarfile *OrgApacheCamelModelDataformatTarFileDataFormat `json:"tarfile,omitempty"`
	Thrift interface{} `json:"thrift,omitempty"`
	TidyMarkup *OrgApacheCamelModelDataformatTidyMarkupDataFormat `json:"tidy-markup,omitempty"`
	UnivocityCsv *OrgApacheCamelModelDataformatUniVocityCsvDataFormat `json:"univocity-csv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat `json:"univocity-fixed,omitempty"`
	UnivocityTsv *OrgApacheCamelModelDataformatUniVocityTsvDataFormat `json:"univocity-tsv,omitempty"`
	Xmlrpc *OrgApacheCamelModelDataformatXmlRpcDataFormat `json:"xmlrpc,omitempty"`
	Xstream interface{} `json:"xstream,omitempty"`
	Yaml *OrgApacheCamelModelDataformatYAMLDataFormat `json:"yaml,omitempty"`
	Zip *OrgApacheCamelModelDataformatZipDeflaterDataFormat `json:"zip,omitempty"`
	Zipfile *OrgApacheCamelModelDataformatZipFileDataFormat `json:"zipfile,omitempty"`
}

// OrgApacheCamelModelDataformatFhirJsonDataFormat
type OrgApacheCamelModelDataformatFhirJsonDataFormat struct {
	ContentTypeHeader bool `json:"content-type-header,omitempty"`
	DontEncodeElements []string `json:"dont-encode-elements,omitempty"`
	DontStripVersionsFromReferencesAtPaths []string `json:"dont-strip-versions-from-references-at-paths,omitempty"`
	EncodeElements []string `json:"encode-elements,omitempty"`
	EncodeElementsAppliesToChildResourcesOnly bool `json:"encode-elements-applies-to-child-resources-only,omitempty"`
	FhirVersion string `json:"fhir-version,omitempty"`
	Id string `json:"id,omitempty"`
	OmitResourceId bool `json:"omit-resource-id,omitempty"`
	OverrideResourceIdWithBundleEntryFullUrl bool `json:"override-resource-id-with-bundle-entry-full-url,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	ServerBaseUrl string `json:"server-base-url,omitempty"`
	StripVersionsFromReferences bool `json:"strip-versions-from-references,omitempty"`
	SummaryMode bool `json:"summary-mode,omitempty"`
	SuppressNarratives bool `json:"suppress-narratives,omitempty"`
}

// OrgApacheCamelModelDataformatFhirXmlDataFormat
type OrgApacheCamelModelDataformatFhirXmlDataFormat struct {
	ContentTypeHeader bool `json:"content-type-header,omitempty"`
	DontEncodeElements []string `json:"dont-encode-elements,omitempty"`
	DontStripVersionsFromReferencesAtPaths []string `json:"dont-strip-versions-from-references-at-paths,omitempty"`
	EncodeElements []string `json:"encode-elements,omitempty"`
	EncodeElementsAppliesToChildResourcesOnly bool `json:"encode-elements-applies-to-child-resources-only,omitempty"`
	FhirVersion string `json:"fhir-version,omitempty"`
	Id string `json:"id,omitempty"`
	OmitResourceId bool `json:"omit-resource-id,omitempty"`
	OverrideResourceIdWithBundleEntryFullUrl bool `json:"override-resource-id-with-bundle-entry-full-url,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	ServerBaseUrl string `json:"server-base-url,omitempty"`
	StripVersionsFromReferences bool `json:"strip-versions-from-references,omitempty"`
	SummaryMode bool `json:"summary-mode,omitempty"`
	SuppressNarratives bool `json:"suppress-narratives,omitempty"`
}

// OrgApacheCamelModelDataformatFlatpackDataFormat
type OrgApacheCamelModelDataformatFlatpackDataFormat struct {
	AllowShortLines bool `json:"allow-short-lines,omitempty"`
	Definition string `json:"definition,omitempty"`
	Delimiter string `json:"delimiter,omitempty"`
	Fixed bool `json:"fixed,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreExtraColumns bool `json:"ignore-extra-columns,omitempty"`
	IgnoreFirstRecord bool `json:"ignore-first-record,omitempty"`
	ParserFactoryRef string `json:"parser-factory-ref,omitempty"`
	TextQualifier string `json:"text-qualifier,omitempty"`
}

// OrgApacheCamelModelDataformatGrokDataFormat
type OrgApacheCamelModelDataformatGrokDataFormat struct {
	AllowMultipleMatchesPerLine bool `json:"allow-multiple-matches-per-line,omitempty"`
	Flattened bool `json:"flattened,omitempty"`
	Id string `json:"id,omitempty"`
	NamedOnly bool `json:"named-only,omitempty"`
	Pattern string `json:"pattern"`
}

// OrgApacheCamelModelDataformatGzipDataFormat
type OrgApacheCamelModelDataformatGzipDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatHL7DataFormat
type OrgApacheCamelModelDataformatHL7DataFormat struct {
	Id string `json:"id,omitempty"`
	Validate bool `json:"validate,omitempty"`
}

// OrgApacheCamelModelDataformatIcalDataFormat
type OrgApacheCamelModelDataformatIcalDataFormat struct {
	Id string `json:"id,omitempty"`
	Validating bool `json:"validating,omitempty"`
}

// OrgApacheCamelModelDataformatJacksonXMLDataFormat
type OrgApacheCamelModelDataformatJacksonXMLDataFormat struct {
	AllowJmsType bool `json:"allow-jms-type,omitempty"`
	AllowUnmarshallType bool `json:"allow-unmarshall-type,omitempty"`
	CollectionType string `json:"collection-type,omitempty"`
	ContentTypeHeader bool `json:"content-type-header,omitempty"`
	DisableFeatures string `json:"disable-features,omitempty"`
	EnableFeatures string `json:"enable-features,omitempty"`
	EnableJaxbAnnotationModule bool `json:"enable-jaxb-annotation-module,omitempty"`
	Id string `json:"id,omitempty"`
	Include string `json:"include,omitempty"`
	JsonView string `json:"json-view,omitempty"`
	ModuleClassNames string `json:"module-class-names,omitempty"`
	ModuleRefs string `json:"module-refs,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	UnmarshalType string `json:"unmarshal-type,omitempty"`
	UseList bool `json:"use-list,omitempty"`
	XmlMapper string `json:"xml-mapper,omitempty"`
}

// OrgApacheCamelModelDataformatJaxbDataFormat
type OrgApacheCamelModelDataformatJaxbDataFormat struct {
	ContentTypeHeader bool `json:"content-type-header,omitempty"`
	ContextPath string `json:"context-path"`
	ContextPathIsClassName bool `json:"context-path-is-class-name,omitempty"`
	Encoding string `json:"encoding,omitempty"`
	FilterNonXmlChars bool `json:"filter-non-xml-chars,omitempty"`
	Fragment bool `json:"fragment,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreJaxbElement bool `json:"ignore-jaxb-element,omitempty"`
	JaxbProviderProperties string `json:"jaxb-provider-properties,omitempty"`
	MustBeJaxbElement bool `json:"must-be-jaxb-element,omitempty"`
	NamespacePrefixRef string `json:"namespace-prefix-ref,omitempty"`
	NoNamespaceSchemaLocation string `json:"no-namespace-schema-location,omitempty"`
	ObjectFactory bool `json:"object-factory,omitempty"`
	PartClass string `json:"part-class,omitempty"`
	PartNamespace string `json:"part-namespace,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	Schema string `json:"schema,omitempty"`
	SchemaLocation string `json:"schema-location,omitempty"`
	SchemaSeverityLevel float64 `json:"schema-severity-level,omitempty"`
	XmlStreamWriterWrapper string `json:"xml-stream-writer-wrapper,omitempty"`
}

// OrgApacheCamelModelDataformatJsonApiDataFormat
type OrgApacheCamelModelDataformatJsonApiDataFormat struct {
	Id string `json:"id,omitempty"`
	MainFormatType string `json:"main-format-type,omitempty"`
}

// OrgApacheCamelModelDataformatJsonDataFormat
type OrgApacheCamelModelDataformatJsonDataFormat struct {
	AllowJmsType bool `json:"allow-jms-type,omitempty"`
	AllowUnmarshallType bool `json:"allow-unmarshall-type,omitempty"`
	AutoDiscoverObjectMapper bool `json:"auto-discover-object-mapper,omitempty"`
	AutoDiscoverSchemaResolver bool `json:"auto-discover-schema-resolver,omitempty"`
	CollectionType string `json:"collection-type,omitempty"`
	ContentTypeHeader bool `json:"content-type-header,omitempty"`
	DisableFeatures string `json:"disable-features,omitempty"`
	DropRootNode bool `json:"drop-root-node,omitempty"`
	EnableFeatures string `json:"enable-features,omitempty"`
	Id string `json:"id,omitempty"`
	Include string `json:"include,omitempty"`
	JsonView string `json:"json-view,omitempty"`
	Library string `json:"library,omitempty"`
	ModuleClassNames string `json:"module-class-names,omitempty"`
	ModuleRefs string `json:"module-refs,omitempty"`
	ObjectMapper string `json:"object-mapper,omitempty"`
	Permissions string `json:"permissions,omitempty"`
	PrettyPrint bool `json:"pretty-print,omitempty"`
	SchemaResolver string `json:"schema-resolver,omitempty"`
	Timezone string `json:"timezone,omitempty"`
	UnmarshalType string `json:"unmarshal-type,omitempty"`
	UseDefaultObjectMapper bool `json:"use-default-object-mapper,omitempty"`
	UseList bool `json:"use-list,omitempty"`
}

// OrgApacheCamelModelDataformatLZFDataFormat
type OrgApacheCamelModelDataformatLZFDataFormat struct {
	Id string `json:"id,omitempty"`
	UsingParallelCompression bool `json:"using-parallel-compression,omitempty"`
}

// OrgApacheCamelModelDataformatMimeMultipartDataFormat
type OrgApacheCamelModelDataformatMimeMultipartDataFormat struct {
	BinaryContent bool `json:"binary-content,omitempty"`
	HeadersInline bool `json:"headers-inline,omitempty"`
	Id string `json:"id,omitempty"`
	IncludeHeaders string `json:"include-headers,omitempty"`
	MultipartSubType string `json:"multipart-sub-type,omitempty"`
	MultipartWithoutAttachment bool `json:"multipart-without-attachment,omitempty"`
}

// OrgApacheCamelModelDataformatPGPDataFormat
type OrgApacheCamelModelDataformatPGPDataFormat struct {
	Algorithm float64 `json:"algorithm,omitempty"`
	Armored bool `json:"armored,omitempty"`
	CompressionAlgorithm float64 `json:"compression-algorithm,omitempty"`
	HashAlgorithm float64 `json:"hash-algorithm,omitempty"`
	Id string `json:"id,omitempty"`
	Integrity bool `json:"integrity,omitempty"`
	KeyFileName string `json:"key-file-name,omitempty"`
	KeyUserid string `json:"key-userid,omitempty"`
	Password string `json:"password,omitempty"`
	Provider string `json:"provider,omitempty"`
	SignatureKeyFileName string `json:"signature-key-file-name,omitempty"`
	SignatureKeyRing string `json:"signature-key-ring,omitempty"`
	SignatureKeyUserid string `json:"signature-key-userid,omitempty"`
	SignaturePassword string `json:"signature-password,omitempty"`
	SignatureVerificationOption string `json:"signature-verification-option,omitempty"`
}

// OrgApacheCamelModelDataformatRssDataFormat
type OrgApacheCamelModelDataformatRssDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatSyslogDataFormat
type OrgApacheCamelModelDataformatSyslogDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatTarFileDataFormat
type OrgApacheCamelModelDataformatTarFileDataFormat struct {
	AllowEmptyDirectory bool `json:"allow-empty-directory,omitempty"`
	Id string `json:"id,omitempty"`
	MaxDecompressedSize float64 `json:"max-decompressed-size,omitempty"`
	PreservePathElements bool `json:"preserve-path-elements,omitempty"`
	UsingIterator bool `json:"using-iterator,omitempty"`
}

// OrgApacheCamelModelDataformatTidyMarkupDataFormat
type OrgApacheCamelModelDataformatTidyMarkupDataFormat struct {
	DataObjectType string `json:"data-object-type,omitempty"`
	Id string `json:"id,omitempty"`
	OmitXmlDeclaration bool `json:"omit-xml-declaration,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityCsvDataFormat
type OrgApacheCamelModelDataformatUniVocityCsvDataFormat struct {
	AsMap bool `json:"as-map,omitempty"`
	Comment string `json:"comment,omitempty"`
	Delimiter string `json:"delimiter,omitempty"`
	EmptyValue string `json:"empty-value,omitempty"`
	HeaderExtractionEnabled bool `json:"header-extraction-enabled,omitempty"`
	HeadersDisabled bool `json:"headers-disabled,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreLeadingWhitespaces bool `json:"ignore-leading-whitespaces,omitempty"`
	IgnoreTrailingWhitespaces bool `json:"ignore-trailing-whitespaces,omitempty"`
	LazyLoad bool `json:"lazy-load,omitempty"`
	LineSeparator string `json:"line-separator,omitempty"`
	NormalizedLineSeparator string `json:"normalized-line-separator,omitempty"`
	NullValue string `json:"null-value,omitempty"`
	NumberOfRecordsToRead float64 `json:"number-of-records-to-read,omitempty"`
	Quote string `json:"quote,omitempty"`
	QuoteAllFields bool `json:"quote-all-fields,omitempty"`
	QuoteEscape string `json:"quote-escape,omitempty"`
	SkipEmptyLines bool `json:"skip-empty-lines,omitempty"`
	UnivocityHeader []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocity-header,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat
type OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat struct {
	AsMap bool `json:"as-map,omitempty"`
	Comment string `json:"comment,omitempty"`
	EmptyValue string `json:"empty-value,omitempty"`
	HeaderExtractionEnabled bool `json:"header-extraction-enabled,omitempty"`
	HeadersDisabled bool `json:"headers-disabled,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreLeadingWhitespaces bool `json:"ignore-leading-whitespaces,omitempty"`
	IgnoreTrailingWhitespaces bool `json:"ignore-trailing-whitespaces,omitempty"`
	LazyLoad bool `json:"lazy-load,omitempty"`
	LineSeparator string `json:"line-separator,omitempty"`
	NormalizedLineSeparator string `json:"normalized-line-separator,omitempty"`
	NullValue string `json:"null-value,omitempty"`
	NumberOfRecordsToRead float64 `json:"number-of-records-to-read,omitempty"`
	Padding string `json:"padding,omitempty"`
	RecordEndsOnNewline bool `json:"record-ends-on-newline,omitempty"`
	SkipEmptyLines bool `json:"skip-empty-lines,omitempty"`
	SkipTrailingCharsUntilNewline bool `json:"skip-trailing-chars-until-newline,omitempty"`
	UnivocityHeader []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocity-header,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityHeader
type OrgApacheCamelModelDataformatUniVocityHeader struct {
	Length string `json:"length,omitempty"`
	Name string `json:"name,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityTsvDataFormat
type OrgApacheCamelModelDataformatUniVocityTsvDataFormat struct {
	AsMap bool `json:"as-map,omitempty"`
	Comment string `json:"comment,omitempty"`
	EmptyValue string `json:"empty-value,omitempty"`
	EscapeChar string `json:"escape-char,omitempty"`
	HeaderExtractionEnabled bool `json:"header-extraction-enabled,omitempty"`
	HeadersDisabled bool `json:"headers-disabled,omitempty"`
	Id string `json:"id,omitempty"`
	IgnoreLeadingWhitespaces bool `json:"ignore-leading-whitespaces,omitempty"`
	IgnoreTrailingWhitespaces bool `json:"ignore-trailing-whitespaces,omitempty"`
	LazyLoad bool `json:"lazy-load,omitempty"`
	LineSeparator string `json:"line-separator,omitempty"`
	NormalizedLineSeparator string `json:"normalized-line-separator,omitempty"`
	NullValue string `json:"null-value,omitempty"`
	NumberOfRecordsToRead float64 `json:"number-of-records-to-read,omitempty"`
	SkipEmptyLines bool `json:"skip-empty-lines,omitempty"`
	UnivocityHeader []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocity-header,omitempty"`
}

// OrgApacheCamelModelDataformatXMLSecurityDataFormat
type OrgApacheCamelModelDataformatXMLSecurityDataFormat struct {
	AddKeyValueForEncryptedKey bool `json:"add-key-value-for-encrypted-key,omitempty"`
	DigestAlgorithm string `json:"digest-algorithm,omitempty"`
	Id string `json:"id,omitempty"`
	KeyCipherAlgorithm string `json:"key-cipher-algorithm,omitempty"`
	KeyOrTrustStoreParametersRef string `json:"key-or-trust-store-parameters-ref,omitempty"`
	KeyPassword string `json:"key-password,omitempty"`
	MgfAlgorithm string `json:"mgf-algorithm,omitempty"`
	PassPhrase string `json:"pass-phrase,omitempty"`
	PassPhraseByte string `json:"pass-phrase-byte,omitempty"`
	RecipientKeyAlias string `json:"recipient-key-alias,omitempty"`
	SecureTag string `json:"secure-tag,omitempty"`
	SecureTagContents bool `json:"secure-tag-contents,omitempty"`
	XmlCipherAlgorithm string `json:"xml-cipher-algorithm,omitempty"`
}

// OrgApacheCamelModelDataformatXmlRpcDataFormat
type OrgApacheCamelModelDataformatXmlRpcDataFormat struct {
	Id string `json:"id,omitempty"`
	Request bool `json:"request,omitempty"`
}

// OrgApacheCamelModelDataformatYAMLDataFormat
type OrgApacheCamelModelDataformatYAMLDataFormat struct {
	AllowAnyType bool `json:"allow-any-type,omitempty"`
	AllowRecursiveKeys bool `json:"allow-recursive-keys,omitempty"`
	Constructor string `json:"constructor,omitempty"`
	DumperOptions string `json:"dumper-options,omitempty"`
	Id string `json:"id,omitempty"`
	Library string `json:"library,omitempty"`
	MaxAliasesForCollections float64 `json:"max-aliases-for-collections,omitempty"`
	PrettyFlow bool `json:"pretty-flow,omitempty"`
	Representer string `json:"representer,omitempty"`
	Resolver string `json:"resolver,omitempty"`
	TypeFilter []*OrgApacheCamelModelDataformatYAMLTypeFilterDefinition `json:"type-filter,omitempty"`
	UnmarshalType string `json:"unmarshal-type,omitempty"`
	UseApplicationContextClassLoader bool `json:"use-application-context-class-loader,omitempty"`
}

// OrgApacheCamelModelDataformatYAMLTypeFilterDefinition
type OrgApacheCamelModelDataformatYAMLTypeFilterDefinition struct {
	Type string `json:"type,omitempty"`
	Value string `json:"value,omitempty"`
}

// OrgApacheCamelModelDataformatZipDeflaterDataFormat
type OrgApacheCamelModelDataformatZipDeflaterDataFormat struct {
	CompressionLevel float64 `json:"compression-level,omitempty"`
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatZipFileDataFormat
type OrgApacheCamelModelDataformatZipFileDataFormat struct {
	AllowEmptyDirectory bool `json:"allow-empty-directory,omitempty"`
	Id string `json:"id,omitempty"`
	MaxDecompressedSize float64 `json:"max-decompressed-size,omitempty"`
	PreservePathElements bool `json:"preserve-path-elements,omitempty"`
	UsingIterator bool `json:"using-iterator,omitempty"`
}

// OrgApacheCamelModelDelayDefinition
type OrgApacheCamelModelDelayDefinition struct {
	AsyncDelayed bool `json:"async-delayed,omitempty"`
	CallerRunsWhenRejected bool `json:"caller-runs-when-rejected,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelDynamicRouterDefinition
type OrgApacheCamelModelDynamicRouterDefinition struct {
	CacheSize float64 `json:"cache-size,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	IgnoreInvalidEndpoints bool `json:"ignore-invalid-endpoints,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	UriDelimiter string `json:"uri-delimiter,omitempty"`
}

// OrgApacheCamelModelEnrichDefinition
type OrgApacheCamelModelEnrichDefinition struct {
	AggregateOnException bool `json:"aggregate-on-exception,omitempty"`
	AllowOptimisedComponents bool `json:"allow-optimised-components,omitempty"`
	CacheSize float64 `json:"cache-size,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	IgnoreInvalidEndpoint bool `json:"ignore-invalid-endpoint,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	ShareUnitOfWork bool `json:"share-unit-of-work,omitempty"`
	StrategyMethodAllowNull string `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
}

// OrgApacheCamelModelExpressionSubElementDefinition
type OrgApacheCamelModelExpressionSubElementDefinition struct {
	Constant interface{} `json:"constant,omitempty"`
	Csimple interface{} `json:"csimple,omitempty"`
	Datasonnet interface{} `json:"datasonnet,omitempty"`
	ExchangeProperty interface{} `json:"exchangeProperty,omitempty"`
	Groovy interface{} `json:"groovy,omitempty"`
	Header interface{} `json:"header,omitempty"`
	Hl7terser interface{} `json:"hl7terser,omitempty"`
	Joor interface{} `json:"joor,omitempty"`
	Jsonpath interface{} `json:"jsonpath,omitempty"`
	Language *OrgApacheCamelModelLanguageLanguageExpression `json:"language,omitempty"`
	Method interface{} `json:"method,omitempty"`
	Mvel interface{} `json:"mvel,omitempty"`
	Ognl interface{} `json:"ognl,omitempty"`
	Ref interface{} `json:"ref,omitempty"`
	Simple interface{} `json:"simple,omitempty"`
	Spel interface{} `json:"spel,omitempty"`
	Tokenize interface{} `json:"tokenize,omitempty"`
	Xpath interface{} `json:"xpath,omitempty"`
	Xquery interface{} `json:"xquery,omitempty"`
	Xtokenize interface{} `json:"xtokenize,omitempty"`
}

// OrgApacheCamelModelFaultToleranceConfigurationDefinition
type OrgApacheCamelModelFaultToleranceConfigurationDefinition struct {
	BulkheadEnabled bool `json:"bulkhead-enabled,omitempty"`
	BulkheadExecutorServiceRef string `json:"bulkhead-executor-service-ref,omitempty"`
	BulkheadMaxConcurrentCalls float64 `json:"bulkhead-max-concurrent-calls,omitempty"`
	BulkheadWaitingTaskQueue float64 `json:"bulkhead-waiting-task-queue,omitempty"`
	CircuitBreakerRef string `json:"circuit-breaker-ref,omitempty"`
	Delay string `json:"delay,omitempty"`
	FailureRatio float64 `json:"failure-ratio,omitempty"`
	Id string `json:"id,omitempty"`
	RequestVolumeThreshold float64 `json:"request-volume-threshold,omitempty"`
	SuccessThreshold float64 `json:"success-threshold,omitempty"`
	TimeoutDuration string `json:"timeout-duration,omitempty"`
	TimeoutEnabled bool `json:"timeout-enabled,omitempty"`
	TimeoutPoolSize float64 `json:"timeout-pool-size,omitempty"`
	TimeoutScheduledExecutorServiceRef string `json:"timeout-scheduled-executor-service-ref,omitempty"`
}

// OrgApacheCamelModelFilterDefinition
type OrgApacheCamelModelFilterDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelFinallyDefinition
type OrgApacheCamelModelFinallyDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelGlobalOptionDefinition
type OrgApacheCamelModelGlobalOptionDefinition struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelGlobalOptionsDefinition
type OrgApacheCamelModelGlobalOptionsDefinition struct {
	GlobalOption []*OrgApacheCamelModelGlobalOptionDefinition `json:"global-option,omitempty"`
}

// OrgApacheCamelModelHystrixConfigurationDefinition
type OrgApacheCamelModelHystrixConfigurationDefinition struct {
	AllowMaximumSizeToDivergeFromCoreSize bool `json:"allow-maximum-size-to-diverge-from-core-size,omitempty"`
	CircuitBreakerEnabled bool `json:"circuit-breaker-enabled,omitempty"`
	CircuitBreakerErrorThresholdPercentage float64 `json:"circuit-breaker-error-threshold-percentage,omitempty"`
	CircuitBreakerForceClosed bool `json:"circuit-breaker-force-closed,omitempty"`
	CircuitBreakerForceOpen bool `json:"circuit-breaker-force-open,omitempty"`
	CircuitBreakerRequestVolumeThreshold float64 `json:"circuit-breaker-request-volume-threshold,omitempty"`
	CircuitBreakerSleepWindowInMilliseconds float64 `json:"circuit-breaker-sleep-window-in-milliseconds,omitempty"`
	CorePoolSize float64 `json:"core-pool-size,omitempty"`
	ExecutionIsolationSemaphoreMaxConcurrentRequests float64 `json:"execution-isolation-semaphore-max-concurrent-requests,omitempty"`
	ExecutionIsolationStrategy string `json:"execution-isolation-strategy,omitempty"`
	ExecutionIsolationThreadInterruptOnTimeout bool `json:"execution-isolation-thread-interrupt-on-timeout,omitempty"`
	ExecutionTimeoutEnabled bool `json:"execution-timeout-enabled,omitempty"`
	ExecutionTimeoutInMilliseconds float64 `json:"execution-timeout-in-milliseconds,omitempty"`
	FallbackEnabled bool `json:"fallback-enabled,omitempty"`
	FallbackIsolationSemaphoreMaxConcurrentRequests float64 `json:"fallback-isolation-semaphore-max-concurrent-requests,omitempty"`
	GroupKey string `json:"group-key,omitempty"`
	Id string `json:"id,omitempty"`
	KeepAliveTime float64 `json:"keep-alive-time,omitempty"`
	MaxQueueSize float64 `json:"max-queue-size,omitempty"`
	MaximumSize float64 `json:"maximum-size,omitempty"`
	MetricsHealthSnapshotIntervalInMilliseconds float64 `json:"metrics-health-snapshot-interval-in-milliseconds,omitempty"`
	MetricsRollingPercentileBucketSize float64 `json:"metrics-rolling-percentile-bucket-size,omitempty"`
	MetricsRollingPercentileEnabled bool `json:"metrics-rolling-percentile-enabled,omitempty"`
	MetricsRollingPercentileWindowBuckets float64 `json:"metrics-rolling-percentile-window-buckets,omitempty"`
	MetricsRollingPercentileWindowInMilliseconds float64 `json:"metrics-rolling-percentile-window-in-milliseconds,omitempty"`
	MetricsRollingStatisticalWindowBuckets float64 `json:"metrics-rolling-statistical-window-buckets,omitempty"`
	MetricsRollingStatisticalWindowInMilliseconds float64 `json:"metrics-rolling-statistical-window-in-milliseconds,omitempty"`
	QueueSizeRejectionThreshold float64 `json:"queue-size-rejection-threshold,omitempty"`
	RequestLogEnabled bool `json:"request-log-enabled,omitempty"`
	ThreadPoolKey string `json:"thread-pool-key,omitempty"`
	ThreadPoolRollingNumberStatisticalWindowBuckets float64 `json:"thread-pool-rolling-number-statistical-window-buckets,omitempty"`
	ThreadPoolRollingNumberStatisticalWindowInMilliseconds float64 `json:"thread-pool-rolling-number-statistical-window-in-milliseconds,omitempty"`
}

// OrgApacheCamelModelIdempotentConsumerDefinition
type OrgApacheCamelModelIdempotentConsumerDefinition struct {
	CompletionEager string `json:"completion-eager,omitempty"`
	Eager bool `json:"eager,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	MessageIdRepositoryRef string `json:"message-id-repository-ref"`
	RemoveOnFailure bool `json:"remove-on-failure,omitempty"`
	SkipDuplicate bool `json:"skip-duplicate,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelInputTypeDefinition
type OrgApacheCamelModelInputTypeDefinition struct {
	Urn string `json:"urn"`
	Validate bool `json:"validate,omitempty"`
}

// OrgApacheCamelModelInterceptDefinition
type OrgApacheCamelModelInterceptDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelLanguageExpressionDefinition
type OrgApacheCamelModelLanguageExpressionDefinition struct {
	Constant interface{} `json:"constant,omitempty"`
	Csimple interface{} `json:"csimple,omitempty"`
	Datasonnet interface{} `json:"datasonnet,omitempty"`
	ExchangeProperty interface{} `json:"exchangeProperty,omitempty"`
	Groovy interface{} `json:"groovy,omitempty"`
	Header interface{} `json:"header,omitempty"`
	Hl7terser interface{} `json:"hl7terser,omitempty"`
	Joor interface{} `json:"joor,omitempty"`
	Jsonpath interface{} `json:"jsonpath,omitempty"`
	Language *OrgApacheCamelModelLanguageLanguageExpression `json:"language,omitempty"`
	Method interface{} `json:"method,omitempty"`
	Mvel interface{} `json:"mvel,omitempty"`
	Ognl interface{} `json:"ognl,omitempty"`
	Ref interface{} `json:"ref,omitempty"`
	Simple interface{} `json:"simple,omitempty"`
	Spel interface{} `json:"spel,omitempty"`
	Tokenize interface{} `json:"tokenize,omitempty"`
	Xpath interface{} `json:"xpath,omitempty"`
	Xquery interface{} `json:"xquery,omitempty"`
	Xtokenize interface{} `json:"xtokenize,omitempty"`
}

// OrgApacheCamelModelLanguageLanguageExpression
type OrgApacheCamelModelLanguageLanguageExpression struct {
	Expression string `json:"expression"`
	Id string `json:"id,omitempty"`
	Language string `json:"language"`
	Trim bool `json:"trim,omitempty"`
}

// OrgApacheCamelModelLoadBalanceDefinition
type OrgApacheCamelModelLoadBalanceDefinition struct {
	CustomLoadBalancer interface{} `json:"custom-load-balancer,omitempty"`
	Failover *OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition `json:"failover,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Random *OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition `json:"random,omitempty"`
	RoundRobin *OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition `json:"round-robin,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	Sticky *OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition `json:"sticky,omitempty"`
	Topic *OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition `json:"topic,omitempty"`
	Weighted *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition `json:"weighted,omitempty"`
}

// OrgApacheCamelModelLoadBalancerDefinition
type OrgApacheCamelModelLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition struct {
	Exception []string `json:"exception,omitempty"`
	Id string `json:"id,omitempty"`
	MaximumFailoverAttempts string `json:"maximum-failover-attempts,omitempty"`
	RoundRobin string `json:"round-robin,omitempty"`
	Sticky string `json:"sticky,omitempty"`
}

// OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition struct {
	CorrelationExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"correlation-expression,omitempty"`
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition struct {
	DistributionRatio string `json:"distribution-ratio"`
	DistributionRatioDelimiter string `json:"distribution-ratio-delimiter,omitempty"`
	Id string `json:"id,omitempty"`
	RoundRobin string `json:"round-robin,omitempty"`
}

// OrgApacheCamelModelLoopDefinition
type OrgApacheCamelModelLoopDefinition struct {
	BreakOnShutdown bool `json:"break-on-shutdown,omitempty"`
	Copy bool `json:"copy,omitempty"`
	DoWhile bool `json:"do-while,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelMarshalDefinition
type OrgApacheCamelModelMarshalDefinition struct {
	Any23 interface{} `json:"any23,omitempty"`
	Asn1 interface{} `json:"asn1,omitempty"`
	Avro interface{} `json:"avro,omitempty"`
	Barcode *OrgApacheCamelModelDataformatBarcodeDataFormat `json:"barcode,omitempty"`
	Base64 *OrgApacheCamelModelDataformatBase64DataFormat `json:"base64,omitempty"`
	Beanio *OrgApacheCamelModelDataformatBeanioDataFormat `json:"beanio,omitempty"`
	Bindy *OrgApacheCamelModelDataformatBindyDataFormat `json:"bindy,omitempty"`
	Cbor *OrgApacheCamelModelDataformatCBORDataFormat `json:"cbor,omitempty"`
	Crypto *OrgApacheCamelModelDataformatCryptoDataFormat `json:"crypto,omitempty"`
	Csv interface{} `json:"csv,omitempty"`
	Custom interface{} `json:"custom,omitempty"`
	FhirJson *OrgApacheCamelModelDataformatFhirJsonDataFormat `json:"fhir-json,omitempty"`
	FhirXml *OrgApacheCamelModelDataformatFhirXmlDataFormat `json:"fhir-xml,omitempty"`
	Flatpack *OrgApacheCamelModelDataformatFlatpackDataFormat `json:"flatpack,omitempty"`
	Grok *OrgApacheCamelModelDataformatGrokDataFormat `json:"grok,omitempty"`
	Gzip *OrgApacheCamelModelDataformatGzipDataFormat `json:"gzip,omitempty"`
	Hl7 *OrgApacheCamelModelDataformatHL7DataFormat `json:"hl7,omitempty"`
	Ical *OrgApacheCamelModelDataformatIcalDataFormat `json:"ical,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Jacksonxml *OrgApacheCamelModelDataformatJacksonXMLDataFormat `json:"jacksonxml,omitempty"`
	Jaxb *OrgApacheCamelModelDataformatJaxbDataFormat `json:"jaxb,omitempty"`
	Json *OrgApacheCamelModelDataformatJsonDataFormat `json:"json,omitempty"`
	JsonApi *OrgApacheCamelModelDataformatJsonApiDataFormat `json:"json-api,omitempty"`
	Lzf *OrgApacheCamelModelDataformatLZFDataFormat `json:"lzf,omitempty"`
	MimeMultipart *OrgApacheCamelModelDataformatMimeMultipartDataFormat `json:"mime-multipart,omitempty"`
	Pgp *OrgApacheCamelModelDataformatPGPDataFormat `json:"pgp,omitempty"`
	Protobuf interface{} `json:"protobuf,omitempty"`
	Rss *OrgApacheCamelModelDataformatRssDataFormat `json:"rss,omitempty"`
	SecureXml *OrgApacheCamelModelDataformatXMLSecurityDataFormat `json:"secure-xml,omitempty"`
	Soapjaxb interface{} `json:"soapjaxb,omitempty"`
	Syslog *OrgApacheCamelModelDataformatSyslogDataFormat `json:"syslog,omitempty"`
	Tarfile *OrgApacheCamelModelDataformatTarFileDataFormat `json:"tarfile,omitempty"`
	Thrift interface{} `json:"thrift,omitempty"`
	TidyMarkup *OrgApacheCamelModelDataformatTidyMarkupDataFormat `json:"tidy-markup,omitempty"`
	UnivocityCsv *OrgApacheCamelModelDataformatUniVocityCsvDataFormat `json:"univocity-csv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat `json:"univocity-fixed,omitempty"`
	UnivocityTsv *OrgApacheCamelModelDataformatUniVocityTsvDataFormat `json:"univocity-tsv,omitempty"`
	Xmlrpc *OrgApacheCamelModelDataformatXmlRpcDataFormat `json:"xmlrpc,omitempty"`
	Xstream interface{} `json:"xstream,omitempty"`
	Yaml *OrgApacheCamelModelDataformatYAMLDataFormat `json:"yaml,omitempty"`
	Zip *OrgApacheCamelModelDataformatZipDeflaterDataFormat `json:"zip,omitempty"`
	Zipfile *OrgApacheCamelModelDataformatZipFileDataFormat `json:"zipfile,omitempty"`
}

// OrgApacheCamelModelMulticastDefinition
type OrgApacheCamelModelMulticastDefinition struct {
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnPrepareRef string `json:"on-prepare-ref,omitempty"`
	ParallelAggregate bool `json:"parallel-aggregate,omitempty"`
	ParallelProcessing bool `json:"parallel-processing,omitempty"`
	ShareUnitOfWork bool `json:"share-unit-of-work,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	StopOnAggregateException bool `json:"stop-on-aggregate-exception,omitempty"`
	StopOnException bool `json:"stop-on-exception,omitempty"`
	StrategyMethodAllowNull bool `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
	Streaming bool `json:"streaming,omitempty"`
	Timeout string `json:"timeout,omitempty"`
}

// OrgApacheCamelModelOnCompletionDefinition
type OrgApacheCamelModelOnCompletionDefinition struct {
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Mode string `json:"mode,omitempty"`
	OnCompleteOnly bool `json:"on-complete-only,omitempty"`
	OnFailureOnly bool `json:"on-failure-only,omitempty"`
	OnWhen *OrgApacheCamelModelWhenDefinition `json:"on-when,omitempty"`
	ParallelProcessing bool `json:"parallel-processing,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	UseOriginalMessage bool `json:"use-original-message,omitempty"`
}

// OrgApacheCamelModelOnExceptionDefinition
type OrgApacheCamelModelOnExceptionDefinition struct {
	Continued *OrgApacheCamelModelExpressionSubElementDefinition `json:"continued,omitempty"`
	Exception []string `json:"exception,omitempty"`
	Handled *OrgApacheCamelModelExpressionSubElementDefinition `json:"handled,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnExceptionOccurredRef string `json:"on-exception-occurred-ref,omitempty"`
	OnRedeliveryRef string `json:"on-redelivery-ref,omitempty"`
	OnWhen *OrgApacheCamelModelWhenDefinition `json:"on-when,omitempty"`
	RedeliveryPolicy *OrgApacheCamelModelRedeliveryPolicyDefinition `json:"redelivery-policy,omitempty"`
	RedeliveryPolicyRef string `json:"redelivery-policy-ref,omitempty"`
	RetryWhile *OrgApacheCamelModelExpressionSubElementDefinition `json:"retry-while,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	UseOriginalBody bool `json:"use-original-body,omitempty"`
	UseOriginalMessage bool `json:"use-original-message,omitempty"`
}

// OrgApacheCamelModelOnFallbackDefinition
type OrgApacheCamelModelOnFallbackDefinition struct {
	FallbackViaNetwork bool `json:"fallback-via-network,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelOptimisticLockRetryPolicyDefinition
type OrgApacheCamelModelOptimisticLockRetryPolicyDefinition struct {
	ExponentialBackOff bool `json:"exponential-back-off,omitempty"`
	MaximumRetries float64 `json:"maximum-retries,omitempty"`
	MaximumRetryDelay string `json:"maximum-retry-delay,omitempty"`
	RandomBackOff bool `json:"random-back-off,omitempty"`
	RetryDelay string `json:"retry-delay,omitempty"`
}

// OrgApacheCamelModelOtherwiseDefinition
type OrgApacheCamelModelOtherwiseDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelOutputDefinition
type OrgApacheCamelModelOutputDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelOutputTypeDefinition
type OrgApacheCamelModelOutputTypeDefinition struct {
	Urn string `json:"urn"`
	Validate bool `json:"validate,omitempty"`
}

// OrgApacheCamelModelPackageScanDefinition
type OrgApacheCamelModelPackageScanDefinition struct {
	Excludes []string `json:"excludes,omitempty"`
	Includes []string `json:"includes,omitempty"`
	Package []string `json:"package,omitempty"`
}

// OrgApacheCamelModelPipelineDefinition
type OrgApacheCamelModelPipelineDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelPolicyDefinition
type OrgApacheCamelModelPolicyDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Ref string `json:"ref"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelPollEnrichDefinition
type OrgApacheCamelModelPollEnrichDefinition struct {
	AggregateOnException bool `json:"aggregate-on-exception,omitempty"`
	CacheSize float64 `json:"cache-size,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	IgnoreInvalidEndpoint float64 `json:"ignore-invalid-endpoint,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	StrategyMethodAllowNull bool `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
	Timeout string `json:"timeout,omitempty"`
}

// OrgApacheCamelModelProcessDefinition
type OrgApacheCamelModelProcessDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Ref string `json:"ref"`
}

// OrgApacheCamelModelProcessorDefinition
type OrgApacheCamelModelProcessorDefinition struct {
	Aggregate *OrgApacheCamelModelAggregateDefinition `json:"aggregate,omitempty"`
	Bean interface{} `json:"bean,omitempty"`
	Choice *OrgApacheCamelModelChoiceDefinition `json:"choice,omitempty"`
	CircuitBreaker *OrgApacheCamelModelCircuitBreakerDefinition `json:"circuitBreaker,omitempty"`
	ClaimCheck *OrgApacheCamelModelClaimCheckDefinition `json:"claim-check,omitempty"`
	ConvertBodyTo interface{} `json:"convertBodyTo,omitempty"`
	Delay *OrgApacheCamelModelDelayDefinition `json:"delay,omitempty"`
	DoCatch *OrgApacheCamelModelCatchDefinition `json:"do-catch,omitempty"`
	DoFinally *OrgApacheCamelModelFinallyDefinition `json:"doFinally,omitempty"`
	DoTry *OrgApacheCamelModelTryDefinition `json:"doTry,omitempty"`
	DynamicRouter *OrgApacheCamelModelDynamicRouterDefinition `json:"dynamicRouter,omitempty"`
	Enrich *OrgApacheCamelModelEnrichDefinition `json:"enrich,omitempty"`
	Filter *OrgApacheCamelModelFilterDefinition `json:"filter,omitempty"`
	IdempotentConsumer *OrgApacheCamelModelIdempotentConsumerDefinition `json:"idempotent-consumer,omitempty"`
	InOnly interface{} `json:"in-only,omitempty"`
	InOut interface{} `json:"in-out,omitempty"`
	Intercept *OrgApacheCamelModelInterceptDefinition `json:"intercept,omitempty"`
	InterceptFrom interface{} `json:"interceptFrom,omitempty"`
	InterceptSendToEndpoint interface{} `json:"interceptSendToEndpoint,omitempty"`
	Kamelet interface{} `json:"kamelet,omitempty"`
	LoadBalance *OrgApacheCamelModelLoadBalanceDefinition `json:"loadBalance,omitempty"`
	Log interface{} `json:"log,omitempty"`
	Loop *OrgApacheCamelModelLoopDefinition `json:"loop,omitempty"`
	Marshal *OrgApacheCamelModelMarshalDefinition `json:"marshal,omitempty"`
	Multicast *OrgApacheCamelModelMulticastDefinition `json:"multicast,omitempty"`
	OnCompletion *OrgApacheCamelModelOnCompletionDefinition `json:"onCompletion,omitempty"`
	OnFallback *OrgApacheCamelModelOnFallbackDefinition `json:"onFallback,omitempty"`
	Otherwise *OrgApacheCamelModelOtherwiseDefinition `json:"otherwise,omitempty"`
	Pipeline *OrgApacheCamelModelPipelineDefinition `json:"pipeline,omitempty"`
	Policy *OrgApacheCamelModelPolicyDefinition `json:"policy,omitempty"`
	PollEnrich *OrgApacheCamelModelPollEnrichDefinition `json:"poll-enrich,omitempty"`
	Process *OrgApacheCamelModelProcessDefinition `json:"process,omitempty"`
	RecipientList *OrgApacheCamelModelRecipientListDefinition `json:"recipient-list,omitempty"`
	RemoveHeader interface{} `json:"remove-header,omitempty"`
	RemoveHeaders interface{} `json:"removeHeaders,omitempty"`
	RemoveProperties interface{} `json:"removeProperties,omitempty"`
	RemoveProperty interface{} `json:"removeProperty,omitempty"`
	Resequence *OrgApacheCamelModelResequenceDefinition `json:"resequence,omitempty"`
	Rollback interface{} `json:"rollback,omitempty"`
	RoutingSlip interface{} `json:"routing-slip,omitempty"`
	Saga *OrgApacheCamelModelSagaDefinition `json:"saga,omitempty"`
	Sample *OrgApacheCamelModelSamplingDefinition `json:"sample,omitempty"`
	Script *OrgApacheCamelModelScriptDefinition `json:"script,omitempty"`
	ServiceCall interface{} `json:"service-call,omitempty"`
	SetBody *OrgApacheCamelModelSetBodyDefinition `json:"setBody,omitempty"`
	SetExchangePattern interface{} `json:"set-exchange-pattern,omitempty"`
	SetHeader *OrgApacheCamelModelSetHeaderDefinition `json:"setHeader,omitempty"`
	SetProperty *OrgApacheCamelModelSetPropertyDefinition `json:"set-property,omitempty"`
	Sort *OrgApacheCamelModelSortDefinition `json:"sort,omitempty"`
	Split *OrgApacheCamelModelSplitDefinition `json:"split,omitempty"`
	Step *OrgApacheCamelModelStepDefinition `json:"step,omitempty"`
	Stop *OrgApacheCamelModelStopDefinition `json:"stop,omitempty"`
	Threads *OrgApacheCamelModelThreadsDefinition `json:"threads,omitempty"`
	Throttle *OrgApacheCamelModelThrottleDefinition `json:"throttle,omitempty"`
	ThrowException *OrgApacheCamelModelThrowExceptionDefinition `json:"throw-exception,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"toD,omitempty"`
	Tod interface{} `json:"tod,omitempty"`
	Transacted *OrgApacheCamelModelTransactedDefinition `json:"transacted,omitempty"`
	Transform *OrgApacheCamelModelTransformDefinition `json:"transform,omitempty"`
	Unmarshal *OrgApacheCamelModelUnmarshalDefinition `json:"unmarshal,omitempty"`
	Validate *OrgApacheCamelModelValidateDefinition `json:"validate,omitempty"`
	When *OrgApacheCamelModelWhenDefinition `json:"when,omitempty"`
	WhenSkipSendToEndpoint *OrgApacheCamelModelWhenSkipSendToEndpointDefinition `json:"when-skip-send-to-endpoint,omitempty"`
	WireTap *OrgApacheCamelModelWireTapDefinition `json:"wire-tap,omitempty"`
}

// OrgApacheCamelModelPropertyDefinition
type OrgApacheCamelModelPropertyDefinition struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelRecipientListDefinition
type OrgApacheCamelModelRecipientListDefinition struct {
	CacheSize float64 `json:"cache-size,omitempty"`
	Delimiter string `json:"delimiter,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	IgnoreInvalidEndpoints bool `json:"ignore-invalid-endpoints,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnPrepareRef string `json:"on-prepare-ref,omitempty"`
	ParallelAggregate bool `json:"parallel-aggregate,omitempty"`
	ParallelProcessing bool `json:"parallel-processing,omitempty"`
	ShareUnitOfWork bool `json:"share-unit-of-work,omitempty"`
	StopOnAggregateException bool `json:"stop-on-aggregate-exception,omitempty"`
	StopOnException bool `json:"stop-on-exception,omitempty"`
	StrategyMethodAllowNull bool `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
	Streaming bool `json:"streaming,omitempty"`
	Timeout string `json:"timeout,omitempty"`
}

// OrgApacheCamelModelRedeliveryPolicyDefinition
type OrgApacheCamelModelRedeliveryPolicyDefinition struct {
	AllowRedeliveryWhileStopping bool `json:"allow-redelivery-while-stopping,omitempty"`
	AsyncDelayedRedelivery bool `json:"async-delayed-redelivery,omitempty"`
	BackOffMultiplier float64 `json:"back-off-multiplier,omitempty"`
	CollisionAvoidanceFactor float64 `json:"collision-avoidance-factor,omitempty"`
	DelayPattern string `json:"delay-pattern,omitempty"`
	DisableRedelivery bool `json:"disable-redelivery,omitempty"`
	ExchangeFormatterRef string `json:"exchange-formatter-ref,omitempty"`
	LogContinued bool `json:"log-continued,omitempty"`
	LogExhausted bool `json:"log-exhausted,omitempty"`
	LogExhaustedMessageBody bool `json:"log-exhausted-message-body,omitempty"`
	LogExhaustedMessageHistory bool `json:"log-exhausted-message-history,omitempty"`
	LogHandled bool `json:"log-handled,omitempty"`
	LogNewException bool `json:"log-new-exception,omitempty"`
	LogRetryAttempted bool `json:"log-retry-attempted,omitempty"`
	LogRetryStackTrace bool `json:"log-retry-stack-trace,omitempty"`
	LogStackTrace bool `json:"log-stack-trace,omitempty"`
	MaximumRedeliveries float64 `json:"maximum-redeliveries,omitempty"`
	MaximumRedeliveryDelay string `json:"maximum-redelivery-delay,omitempty"`
	RedeliveryDelay string `json:"redelivery-delay,omitempty"`
	RetriesExhaustedLogLevel string `json:"retries-exhausted-log-level,omitempty"`
	RetryAttemptedLogInterval float64 `json:"retry-attempted-log-interval,omitempty"`
	RetryAttemptedLogLevel string `json:"retry-attempted-log-level,omitempty"`
	UseCollisionAvoidance bool `json:"use-collision-avoidance,omitempty"`
	UseExponentialBackOff bool `json:"use-exponential-back-off,omitempty"`
}

// OrgApacheCamelModelResequenceDefinition
type OrgApacheCamelModelResequenceDefinition struct {
	BatchConfig *OrgApacheCamelModelConfigBatchResequencerConfig `json:"batch-config,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	StreamConfig *OrgApacheCamelModelConfigStreamResequencerConfig `json:"stream-config,omitempty"`
}

// OrgApacheCamelModelResilience4jConfigurationDefinition
type OrgApacheCamelModelResilience4jConfigurationDefinition struct {
	AutomaticTransitionFromOpenToHalfOpenEnabled bool `json:"automatic-transition-from-open-to-half-open-enabled,omitempty"`
	CircuitBreakerRef string `json:"circuit-breaker-ref,omitempty"`
	ConfigRef string `json:"config-ref,omitempty"`
	FailureRateThreshold float64 `json:"failure-rate-threshold,omitempty"`
	Id string `json:"id,omitempty"`
	MinimumNumberOfCalls float64 `json:"minimum-number-of-calls,omitempty"`
	PermittedNumberOfCallsInHalfOpenState float64 `json:"permitted-number-of-calls-in-half-open-state,omitempty"`
	SlidingWindowSize float64 `json:"sliding-window-size,omitempty"`
	SlidingWindowType string `json:"sliding-window-type,omitempty"`
	SlowCallDurationThreshold float64 `json:"slow-call-duration-threshold,omitempty"`
	SlowCallRateThreshold float64 `json:"slow-call-rate-threshold,omitempty"`
	WaitDurationInOpenState float64 `json:"wait-duration-in-open-state,omitempty"`
	WritableStackTraceEnabled bool `json:"writable-stack-trace-enabled,omitempty"`
}

// OrgApacheCamelModelRestContextRefDefinition
type OrgApacheCamelModelRestContextRefDefinition struct {
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRestDeleteVerbDefinition
type OrgApacheCamelModelRestDeleteVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestGetVerbDefinition
type OrgApacheCamelModelRestGetVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestHeadVerbDefinition
type OrgApacheCamelModelRestHeadVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestPatchVerbDefinition
type OrgApacheCamelModelRestPatchVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestPostVerbDefinition
type OrgApacheCamelModelRestPostVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestPutVerbDefinition
type OrgApacheCamelModelRestPutVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRestRestBindingDefinition
type OrgApacheCamelModelRestRestBindingDefinition struct {
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Component string `json:"component,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Produces string `json:"produces,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Type string `json:"type,omitempty"`
}

// OrgApacheCamelModelRestRestConfigurationDefinition
type OrgApacheCamelModelRestRestConfigurationDefinition struct {
	ApiComponent string `json:"api-component,omitempty"`
	ApiContextIdPattern string `json:"api-context-id-pattern,omitempty"`
	ApiContextListing bool `json:"api-context-listing,omitempty"`
	ApiContextPath string `json:"api-context-path,omitempty"`
	ApiContextRouteId string `json:"api-context-route-id,omitempty"`
	ApiHost string `json:"api-host,omitempty"`
	ApiProperty []*OrgApacheCamelModelRestRestPropertyDefinition `json:"api-property,omitempty"`
	ApiVendorExtension bool `json:"api-vendor-extension,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation bool `json:"client-request-validation,omitempty"`
	Component string `json:"component,omitempty"`
	ComponentProperty []*OrgApacheCamelModelRestRestPropertyDefinition `json:"component-property,omitempty"`
	ConsumerProperty []*OrgApacheCamelModelRestRestPropertyDefinition `json:"consumer-property,omitempty"`
	ContextPath string `json:"context-path,omitempty"`
	CorsHeaders []*OrgApacheCamelModelRestRestPropertyDefinition `json:"cors-headers,omitempty"`
	DataFormatProperty []*OrgApacheCamelModelRestRestPropertyDefinition `json:"data-format-property,omitempty"`
	EnableCors bool `json:"enable-cors,omitempty"`
	EndpointProperty []*OrgApacheCamelModelRestRestPropertyDefinition `json:"endpoint-property,omitempty"`
	Host string `json:"host,omitempty"`
	HostNameResolver string `json:"host-name-resolver,omitempty"`
	JsonDataFormat string `json:"json-data-format,omitempty"`
	Port string `json:"port,omitempty"`
	ProducerApiDoc string `json:"producer-api-doc,omitempty"`
	ProducerComponent string `json:"producer-component,omitempty"`
	Scheme string `json:"scheme,omitempty"`
	SkipBindingOnErrorCode bool `json:"skip-binding-on-error-code,omitempty"`
	UseXForwardHeaders bool `json:"use-x-forward-headers,omitempty"`
	XmlDataFormat string `json:"xml-data-format,omitempty"`
}

// OrgApacheCamelModelRestRestDefinition
type OrgApacheCamelModelRestRestDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Delete []*OrgApacheCamelModelRestDeleteVerbDefinition `json:"delete,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Get []*OrgApacheCamelModelRestGetVerbDefinition `json:"get,omitempty"`
	Head []*OrgApacheCamelModelRestHeadVerbDefinition `json:"head,omitempty"`
	Patch []*OrgApacheCamelModelRestPatchVerbDefinition `json:"patch,omitempty"`
	Path string `json:"path,omitempty"`
	Post []*OrgApacheCamelModelRestPostVerbDefinition `json:"post,omitempty"`
	Produces string `json:"produces,omitempty"`
	Put []*OrgApacheCamelModelRestPutVerbDefinition `json:"put,omitempty"`
	SecurityDefinitions *OrgApacheCamelModelRestRestSecuritiesDefinition `json:"security-definitions,omitempty"`
	SecurityRequirements *OrgApacheCamelModelRestRestSecuritiesRequirement `json:"security-requirements,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Tag string `json:"tag,omitempty"`
	Verb []*OrgApacheCamelModelRestVerbDefinition `json:"verb,omitempty"`
}

// OrgApacheCamelModelRestRestOperationParamDefinition
type OrgApacheCamelModelRestRestOperationParamDefinition struct {
	ArrayType string `json:"array-type,omitempty"`
	CollectionFormat string `json:"collection-format,omitempty"`
	DataFormat string `json:"data-format,omitempty"`
	DataType string `json:"data-type,omitempty"`
	DefaultValue string `json:"default-value,omitempty"`
	Description string `json:"description,omitempty"`
	Examples []*OrgApacheCamelModelRestRestPropertyDefinition `json:"examples,omitempty"`
	Name string `json:"name"`
	Required bool `json:"required,omitempty"`
	Type string `json:"type"`
	Value []string `json:"value,omitempty"`
}

// OrgApacheCamelModelRestRestOperationResponseHeaderDefinition
type OrgApacheCamelModelRestRestOperationResponseHeaderDefinition struct {
	ArrayType string `json:"array-type,omitempty"`
	CollectionFormat string `json:"collection-format,omitempty"`
	DataFormat string `json:"data-format,omitempty"`
	DataType string `json:"data-type,omitempty"`
	Description string `json:"description,omitempty"`
	Example string `json:"example,omitempty"`
	Name string `json:"name"`
	Value []string `json:"value,omitempty"`
}

// OrgApacheCamelModelRestRestOperationResponseMsgDefinition
type OrgApacheCamelModelRestRestOperationResponseMsgDefinition struct {
	Code string `json:"code,omitempty"`
	Examples []*OrgApacheCamelModelRestRestPropertyDefinition `json:"examples,omitempty"`
	Header []*OrgApacheCamelModelRestRestOperationResponseHeaderDefinition `json:"header,omitempty"`
	Message string `json:"message"`
	ResponseModel string `json:"response-model,omitempty"`
}

// OrgApacheCamelModelRestRestPropertyDefinition
type OrgApacheCamelModelRestRestPropertyDefinition struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelRestRestSecuritiesDefinition
type OrgApacheCamelModelRestRestSecuritiesDefinition struct {
	ApiKey *OrgApacheCamelModelRestRestSecurityApiKey `json:"api-key,omitempty"`
	BasicAuth *OrgApacheCamelModelRestRestSecurityBasicAuth `json:"basic-auth,omitempty"`
	Bearer *OrgApacheCamelModelRestRestSecurityBearerToken `json:"bearer,omitempty"`
	MutualTls *OrgApacheCamelModelRestRestSecurityMutualTLS `json:"mutual-tls,omitempty"`
	Oauth2 *OrgApacheCamelModelRestRestSecurityOAuth2 `json:"oauth2,omitempty"`
	OpenIdConnect *OrgApacheCamelModelRestRestSecurityOpenIdConnect `json:"open-id-connect,omitempty"`
}

// OrgApacheCamelModelRestRestSecuritiesRequirement
type OrgApacheCamelModelRestRestSecuritiesRequirement struct {
	SecurityRequirement *OrgApacheCamelModelRestSecurityDefinition `json:"security-requirement,omitempty"`
}

// OrgApacheCamelModelRestRestSecurityApiKey
type OrgApacheCamelModelRestRestSecurityApiKey struct {
	Description string `json:"description,omitempty"`
	InCookie bool `json:"in-cookie,omitempty"`
	InHeader bool `json:"in-header,omitempty"`
	InQuery bool `json:"in-query,omitempty"`
	Key string `json:"key"`
	Name string `json:"name"`
}

// OrgApacheCamelModelRestRestSecurityBasicAuth
type OrgApacheCamelModelRestRestSecurityBasicAuth struct {
	Description string `json:"description,omitempty"`
	Key string `json:"key"`
}

// OrgApacheCamelModelRestRestSecurityBearerToken
type OrgApacheCamelModelRestRestSecurityBearerToken struct {
	Description string `json:"description,omitempty"`
	Format string `json:"format,omitempty"`
	Key string `json:"key"`
}

// OrgApacheCamelModelRestRestSecurityMutualTLS
type OrgApacheCamelModelRestRestSecurityMutualTLS struct {
	Description string `json:"description,omitempty"`
	Key string `json:"key"`
}

// OrgApacheCamelModelRestRestSecurityOAuth2
type OrgApacheCamelModelRestRestSecurityOAuth2 struct {
	AuthorizationUrl string `json:"authorization-url,omitempty"`
	Description string `json:"description,omitempty"`
	Flow string `json:"flow,omitempty"`
	Key string `json:"key"`
	RefreshUrl string `json:"refresh-url,omitempty"`
	Scopes []*OrgApacheCamelModelRestRestPropertyDefinition `json:"scopes,omitempty"`
	TokenUrl string `json:"token-url,omitempty"`
}

// OrgApacheCamelModelRestRestSecurityOpenIdConnect
type OrgApacheCamelModelRestRestSecurityOpenIdConnect struct {
	Description string `json:"description,omitempty"`
	Key string `json:"key"`
	Url string `json:"url"`
}

// OrgApacheCamelModelRestRestsDefinition
type OrgApacheCamelModelRestRestsDefinition struct {
	Rest []*OrgApacheCamelModelRestRestDefinition `json:"rest,omitempty"`
}

// OrgApacheCamelModelRestSecurityDefinition
type OrgApacheCamelModelRestSecurityDefinition struct {
	Key string `json:"key"`
	Scopes string `json:"scopes,omitempty"`
}

// OrgApacheCamelModelRestVerbDefinition
type OrgApacheCamelModelRestVerbDefinition struct {
	ApiDocs string `json:"api-docs,omitempty"`
	BindingMode string `json:"binding-mode,omitempty"`
	ClientRequestValidation string `json:"client-request-validation,omitempty"`
	Consumes string `json:"consumes,omitempty"`
	Deprecated bool `json:"deprecated,omitempty"`
	EnableCors string `json:"enable-cors,omitempty"`
	Method string `json:"method,omitempty"`
	OutType string `json:"out-type,omitempty"`
	Param []*OrgApacheCamelModelRestRestOperationParamDefinition `json:"param,omitempty"`
	Produces string `json:"produces,omitempty"`
	ResponseMessage []*OrgApacheCamelModelRestRestOperationResponseMsgDefinition `json:"response-message,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteId string `json:"route-id,omitempty"`
	Security []*OrgApacheCamelModelRestSecurityDefinition `json:"security,omitempty"`
	SkipBindingOnErrorCode string `json:"skip-binding-on-error-code,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	To interface{} `json:"to,omitempty"`
	ToD interface{} `json:"to-d,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelRouteContextRefDefinition
type OrgApacheCamelModelRouteContextRefDefinition struct {
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRouteDefinition
type OrgApacheCamelModelRouteDefinition struct {
	From interface{} `json:"from"`
	Group string `json:"group,omitempty"`
	Id string `json:"id,omitempty"`
	RouteConfigurationId string `json:"route-configuration-id,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
}

// OrgApacheCamelModelRouteTemplateDefinition
type OrgApacheCamelModelRouteTemplateDefinition struct {
	Beans []*OrgApacheCamelDslYamlDeserializersNamedBeanDefinition `json:"beans,omitempty"`
	From interface{} `json:"from"`
	Id string `json:"id"`
	Parameters []*OrgApacheCamelModelRouteTemplateParameterDefinition `json:"parameters,omitempty"`
}

// OrgApacheCamelModelRouteTemplateParameterDefinition
type OrgApacheCamelModelRouteTemplateParameterDefinition struct {
	DefaultValue string `json:"default-value,omitempty"`
	Description string `json:"description,omitempty"`
	Name string `json:"name"`
	Required bool `json:"required,omitempty"`
}

// OrgApacheCamelModelSagaDefinition
type OrgApacheCamelModelSagaDefinition struct {
	Compensation interface{} `json:"compensation,omitempty"`
	Completion interface{} `json:"completion,omitempty"`
	CompletionMode string `json:"completion-mode,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Option []*OrgApacheCamelModelSagaOptionDefinition `json:"option,omitempty"`
	Propagation string `json:"propagation,omitempty"`
	SagaServiceRef string `json:"saga-service-ref,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	Timeout string `json:"timeout,omitempty"`
	TimeoutInMilliseconds float64 `json:"timeout-in-milliseconds,omitempty"`
}

// OrgApacheCamelModelSagaOptionDefinition
type OrgApacheCamelModelSagaOptionDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	OptionName string `json:"option-name"`
}

// OrgApacheCamelModelSamplingDefinition
type OrgApacheCamelModelSamplingDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	MessageFrequency float64 `json:"message-frequency,omitempty"`
	SamplePeriod string `json:"sample-period,omitempty"`
	Units string `json:"units,omitempty"`
}

// OrgApacheCamelModelScriptDefinition
type OrgApacheCamelModelScriptDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelSetBodyDefinition
type OrgApacheCamelModelSetBodyDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelSetHeaderDefinition
type OrgApacheCamelModelSetHeaderDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Name string `json:"name"`
}

// OrgApacheCamelModelSetPropertyDefinition
type OrgApacheCamelModelSetPropertyDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Name string `json:"name"`
}

// OrgApacheCamelModelSortDefinition
type OrgApacheCamelModelSortDefinition struct {
	ComparatorRef string `json:"comparator-ref,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelSplitDefinition
type OrgApacheCamelModelSplitDefinition struct {
	Delimiter string `json:"delimiter,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnPrepareRef string `json:"on-prepare-ref,omitempty"`
	ParallelAggregate bool `json:"parallel-aggregate,omitempty"`
	ParallelProcessing bool `json:"parallel-processing,omitempty"`
	ShareUnitOfWork bool `json:"share-unit-of-work,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
	StopOnAggregateException bool `json:"stop-on-aggregate-exception,omitempty"`
	StopOnException bool `json:"stop-on-exception,omitempty"`
	StrategyMethodAllowNull bool `json:"strategy-method-allow-null,omitempty"`
	StrategyMethodName string `json:"strategy-method-name,omitempty"`
	StrategyRef string `json:"strategy-ref,omitempty"`
	Streaming bool `json:"streaming,omitempty"`
	Timeout string `json:"timeout,omitempty"`
}

// OrgApacheCamelModelStepDefinition
type OrgApacheCamelModelStepDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelStopDefinition
type OrgApacheCamelModelStopDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelThreadPoolProfileDefinition
type OrgApacheCamelModelThreadPoolProfileDefinition struct {
	AllowCoreThreadTimeOut bool `json:"allow-core-thread-time-out,omitempty"`
	DefaultProfile bool `json:"default-profile,omitempty"`
	KeepAliveTime float64 `json:"keep-alive-time,omitempty"`
	MaxPoolSize float64 `json:"max-pool-size,omitempty"`
	MaxQueueSize float64 `json:"max-queue-size,omitempty"`
	PoolSize float64 `json:"pool-size,omitempty"`
	RejectedPolicy string `json:"rejected-policy,omitempty"`
	TimeUnit string `json:"time-unit,omitempty"`
}

// OrgApacheCamelModelThreadsDefinition
type OrgApacheCamelModelThreadsDefinition struct {
	AllowCoreThreadTimeOut bool `json:"allow-core-thread-time-out,omitempty"`
	CallerRunsWhenRejected string `json:"caller-runs-when-rejected,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	KeepAliveTime float64 `json:"keep-alive-time,omitempty"`
	MaxPoolSize float64 `json:"max-pool-size,omitempty"`
	MaxQueueSize float64 `json:"max-queue-size,omitempty"`
	PoolSize float64 `json:"pool-size,omitempty"`
	RejectedPolicy string `json:"rejected-policy,omitempty"`
	ThreadName string `json:"thread-name,omitempty"`
	TimeUnit string `json:"time-unit,omitempty"`
}

// OrgApacheCamelModelThrottleDefinition
type OrgApacheCamelModelThrottleDefinition struct {
	AsyncDelayed bool `json:"async-delayed,omitempty"`
	CallerRunsWhenRejected bool `json:"caller-runs-when-rejected,omitempty"`
	CorrelationExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"correlation-expression,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	RejectExecution bool `json:"reject-execution,omitempty"`
	TimePeriodMillis string `json:"time-period-millis,omitempty"`
}

// OrgApacheCamelModelThrowExceptionDefinition
type OrgApacheCamelModelThrowExceptionDefinition struct {
	ExceptionType string `json:"exception-type,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Message string `json:"message,omitempty"`
	Ref string `json:"ref,omitempty"`
}

// OrgApacheCamelModelTransactedDefinition
type OrgApacheCamelModelTransactedDefinition struct {
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Ref string `json:"ref,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelTransformDefinition
type OrgApacheCamelModelTransformDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelTransformerCustomTransformerDefinition
type OrgApacheCamelModelTransformerCustomTransformerDefinition struct {
	ClassName string `json:"class-name,omitempty"`
	FromType string `json:"from-type,omitempty"`
	Ref string `json:"ref,omitempty"`
	Scheme string `json:"scheme,omitempty"`
	ToType string `json:"to-type,omitempty"`
}

// OrgApacheCamelModelTransformerDataFormatTransformerDefinition
type OrgApacheCamelModelTransformerDataFormatTransformerDefinition struct {
	Any23 interface{} `json:"any23,omitempty"`
	Asn1 interface{} `json:"asn1,omitempty"`
	Avro interface{} `json:"avro,omitempty"`
	Barcode *OrgApacheCamelModelDataformatBarcodeDataFormat `json:"barcode,omitempty"`
	Base64 *OrgApacheCamelModelDataformatBase64DataFormat `json:"base64,omitempty"`
	Beanio *OrgApacheCamelModelDataformatBeanioDataFormat `json:"beanio,omitempty"`
	Bindy *OrgApacheCamelModelDataformatBindyDataFormat `json:"bindy,omitempty"`
	Cbor *OrgApacheCamelModelDataformatCBORDataFormat `json:"cbor,omitempty"`
	Crypto *OrgApacheCamelModelDataformatCryptoDataFormat `json:"crypto,omitempty"`
	Csv interface{} `json:"csv,omitempty"`
	Custom interface{} `json:"custom,omitempty"`
	FhirJson *OrgApacheCamelModelDataformatFhirJsonDataFormat `json:"fhir-json,omitempty"`
	FhirXml *OrgApacheCamelModelDataformatFhirXmlDataFormat `json:"fhir-xml,omitempty"`
	Flatpack *OrgApacheCamelModelDataformatFlatpackDataFormat `json:"flatpack,omitempty"`
	FromType string `json:"from-type,omitempty"`
	Grok *OrgApacheCamelModelDataformatGrokDataFormat `json:"grok,omitempty"`
	Gzip *OrgApacheCamelModelDataformatGzipDataFormat `json:"gzip,omitempty"`
	Hl7 *OrgApacheCamelModelDataformatHL7DataFormat `json:"hl7,omitempty"`
	Ical *OrgApacheCamelModelDataformatIcalDataFormat `json:"ical,omitempty"`
	Jacksonxml *OrgApacheCamelModelDataformatJacksonXMLDataFormat `json:"jacksonxml,omitempty"`
	Jaxb *OrgApacheCamelModelDataformatJaxbDataFormat `json:"jaxb,omitempty"`
	Json *OrgApacheCamelModelDataformatJsonDataFormat `json:"json,omitempty"`
	JsonApi *OrgApacheCamelModelDataformatJsonApiDataFormat `json:"json-api,omitempty"`
	Lzf *OrgApacheCamelModelDataformatLZFDataFormat `json:"lzf,omitempty"`
	MimeMultipart *OrgApacheCamelModelDataformatMimeMultipartDataFormat `json:"mime-multipart,omitempty"`
	Pgp *OrgApacheCamelModelDataformatPGPDataFormat `json:"pgp,omitempty"`
	Protobuf interface{} `json:"protobuf,omitempty"`
	Ref string `json:"ref,omitempty"`
	Rss *OrgApacheCamelModelDataformatRssDataFormat `json:"rss,omitempty"`
	Scheme string `json:"scheme,omitempty"`
	SecureXml *OrgApacheCamelModelDataformatXMLSecurityDataFormat `json:"secure-xml,omitempty"`
	Soapjaxb interface{} `json:"soapjaxb,omitempty"`
	Syslog *OrgApacheCamelModelDataformatSyslogDataFormat `json:"syslog,omitempty"`
	Tarfile *OrgApacheCamelModelDataformatTarFileDataFormat `json:"tarfile,omitempty"`
	Thrift interface{} `json:"thrift,omitempty"`
	TidyMarkup *OrgApacheCamelModelDataformatTidyMarkupDataFormat `json:"tidy-markup,omitempty"`
	ToType string `json:"to-type,omitempty"`
	UnivocityCsv *OrgApacheCamelModelDataformatUniVocityCsvDataFormat `json:"univocity-csv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat `json:"univocity-fixed,omitempty"`
	UnivocityTsv *OrgApacheCamelModelDataformatUniVocityTsvDataFormat `json:"univocity-tsv,omitempty"`
	Xmlrpc *OrgApacheCamelModelDataformatXmlRpcDataFormat `json:"xmlrpc,omitempty"`
	Xstream interface{} `json:"xstream,omitempty"`
	Yaml *OrgApacheCamelModelDataformatYAMLDataFormat `json:"yaml,omitempty"`
	Zip *OrgApacheCamelModelDataformatZipDeflaterDataFormat `json:"zip,omitempty"`
	Zipfile *OrgApacheCamelModelDataformatZipFileDataFormat `json:"zipfile,omitempty"`
}

// OrgApacheCamelModelTransformerEndpointTransformerDefinition
type OrgApacheCamelModelTransformerEndpointTransformerDefinition struct {
	FromType string `json:"from-type,omitempty"`
	Ref string `json:"ref,omitempty"`
	Scheme string `json:"scheme,omitempty"`
	ToType string `json:"to-type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelTransformerTransformersDefinition
type OrgApacheCamelModelTransformerTransformersDefinition struct {
	CustomTransformer *OrgApacheCamelModelTransformerCustomTransformerDefinition `json:"custom-transformer,omitempty"`
	DataFormatTransformer *OrgApacheCamelModelTransformerDataFormatTransformerDefinition `json:"data-format-transformer,omitempty"`
	EndpointTransformer *OrgApacheCamelModelTransformerEndpointTransformerDefinition `json:"endpoint-transformer,omitempty"`
}

// OrgApacheCamelModelTryDefinition
type OrgApacheCamelModelTryDefinition struct {
	DoCatch []*OrgApacheCamelModelCatchDefinition `json:"do-catch,omitempty"`
	DoFinally *OrgApacheCamelModelFinallyDefinition `json:"do-finally,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelUnmarshalDefinition
type OrgApacheCamelModelUnmarshalDefinition struct {
	Any23 interface{} `json:"any23,omitempty"`
	Asn1 interface{} `json:"asn1,omitempty"`
	Avro interface{} `json:"avro,omitempty"`
	Barcode *OrgApacheCamelModelDataformatBarcodeDataFormat `json:"barcode,omitempty"`
	Base64 *OrgApacheCamelModelDataformatBase64DataFormat `json:"base64,omitempty"`
	Beanio *OrgApacheCamelModelDataformatBeanioDataFormat `json:"beanio,omitempty"`
	Bindy *OrgApacheCamelModelDataformatBindyDataFormat `json:"bindy,omitempty"`
	Cbor *OrgApacheCamelModelDataformatCBORDataFormat `json:"cbor,omitempty"`
	Crypto *OrgApacheCamelModelDataformatCryptoDataFormat `json:"crypto,omitempty"`
	Csv interface{} `json:"csv,omitempty"`
	Custom interface{} `json:"custom,omitempty"`
	FhirJson *OrgApacheCamelModelDataformatFhirJsonDataFormat `json:"fhir-json,omitempty"`
	FhirXml *OrgApacheCamelModelDataformatFhirXmlDataFormat `json:"fhir-xml,omitempty"`
	Flatpack *OrgApacheCamelModelDataformatFlatpackDataFormat `json:"flatpack,omitempty"`
	Grok *OrgApacheCamelModelDataformatGrokDataFormat `json:"grok,omitempty"`
	Gzip *OrgApacheCamelModelDataformatGzipDataFormat `json:"gzip,omitempty"`
	Hl7 *OrgApacheCamelModelDataformatHL7DataFormat `json:"hl7,omitempty"`
	Ical *OrgApacheCamelModelDataformatIcalDataFormat `json:"ical,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Jacksonxml *OrgApacheCamelModelDataformatJacksonXMLDataFormat `json:"jacksonxml,omitempty"`
	Jaxb *OrgApacheCamelModelDataformatJaxbDataFormat `json:"jaxb,omitempty"`
	Json *OrgApacheCamelModelDataformatJsonDataFormat `json:"json,omitempty"`
	JsonApi *OrgApacheCamelModelDataformatJsonApiDataFormat `json:"json-api,omitempty"`
	Lzf *OrgApacheCamelModelDataformatLZFDataFormat `json:"lzf,omitempty"`
	MimeMultipart *OrgApacheCamelModelDataformatMimeMultipartDataFormat `json:"mime-multipart,omitempty"`
	Pgp *OrgApacheCamelModelDataformatPGPDataFormat `json:"pgp,omitempty"`
	Protobuf interface{} `json:"protobuf,omitempty"`
	Rss *OrgApacheCamelModelDataformatRssDataFormat `json:"rss,omitempty"`
	SecureXml *OrgApacheCamelModelDataformatXMLSecurityDataFormat `json:"secure-xml,omitempty"`
	Soapjaxb interface{} `json:"soapjaxb,omitempty"`
	Syslog *OrgApacheCamelModelDataformatSyslogDataFormat `json:"syslog,omitempty"`
	Tarfile *OrgApacheCamelModelDataformatTarFileDataFormat `json:"tarfile,omitempty"`
	Thrift interface{} `json:"thrift,omitempty"`
	TidyMarkup *OrgApacheCamelModelDataformatTidyMarkupDataFormat `json:"tidy-markup,omitempty"`
	UnivocityCsv *OrgApacheCamelModelDataformatUniVocityCsvDataFormat `json:"univocity-csv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedWidthDataFormat `json:"univocity-fixed,omitempty"`
	UnivocityTsv *OrgApacheCamelModelDataformatUniVocityTsvDataFormat `json:"univocity-tsv,omitempty"`
	Xmlrpc *OrgApacheCamelModelDataformatXmlRpcDataFormat `json:"xmlrpc,omitempty"`
	Xstream interface{} `json:"xstream,omitempty"`
	Yaml *OrgApacheCamelModelDataformatYAMLDataFormat `json:"yaml,omitempty"`
	Zip *OrgApacheCamelModelDataformatZipDeflaterDataFormat `json:"zip,omitempty"`
	Zipfile *OrgApacheCamelModelDataformatZipFileDataFormat `json:"zipfile,omitempty"`
}

// OrgApacheCamelModelValidateDefinition
type OrgApacheCamelModelValidateDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
}

// OrgApacheCamelModelValidatorCustomValidatorDefinition
type OrgApacheCamelModelValidatorCustomValidatorDefinition struct {
	ClassName string `json:"class-name,omitempty"`
	Ref string `json:"ref,omitempty"`
	Type string `json:"type,omitempty"`
}

// OrgApacheCamelModelValidatorEndpointValidatorDefinition
type OrgApacheCamelModelValidatorEndpointValidatorDefinition struct {
	Ref string `json:"ref,omitempty"`
	Type string `json:"type,omitempty"`
	Uri string `json:"uri,omitempty"`
}

// OrgApacheCamelModelValidatorPredicateValidatorDefinition
type OrgApacheCamelModelValidatorPredicateValidatorDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Type string `json:"type,omitempty"`
}

// OrgApacheCamelModelValidatorValidatorsDefinition
type OrgApacheCamelModelValidatorValidatorsDefinition struct {
	CustomValidator *OrgApacheCamelModelValidatorCustomValidatorDefinition `json:"custom-validator,omitempty"`
	EndpointValidator *OrgApacheCamelModelValidatorEndpointValidatorDefinition `json:"endpoint-validator,omitempty"`
	PredicateValidator *OrgApacheCamelModelValidatorPredicateValidatorDefinition `json:"predicate-validator,omitempty"`
}

// OrgApacheCamelModelWhenDefinition
type OrgApacheCamelModelWhenDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelWhenSkipSendToEndpointDefinition
type OrgApacheCamelModelWhenSkipSendToEndpointDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	Steps []*OrgApacheCamelModelProcessorDefinition `json:"steps,omitempty"`
}

// OrgApacheCamelModelWireTapDefinition
type OrgApacheCamelModelWireTapDefinition struct {
	AllowOptimisedComponents bool `json:"allow-optimised-components,omitempty"`
	AutoStartComponents bool `json:"auto-start-components,omitempty"`
	Body *OrgApacheCamelModelExpressionSubElementDefinition `json:"body,omitempty"`
	CacheSize float64 `json:"cache-size,omitempty"`
	Copy bool `json:"copy,omitempty"`
	DynamicUri bool `json:"dynamic-uri,omitempty"`
	ExecutorServiceRef string `json:"executor-service-ref,omitempty"`
	IgnoreInvalidEndpoint bool `json:"ignore-invalid-endpoint,omitempty"`
	InheritErrorHandler bool `json:"inherit-error-handler,omitempty"`
	OnPrepareRef string `json:"on-prepare-ref,omitempty"`
	Parameters *Parameters `json:"parameters,omitempty"`
	Pattern string `json:"pattern,omitempty"`
	ProcessorRef string `json:"processor-ref,omitempty"`
	SetHeader []*OrgApacheCamelModelSetHeaderDefinition `json:"set-header,omitempty"`
	Uri string `json:"uri"`
}

// Parameters
type Parameters struct {
}

// Properties
type Properties struct {
}

// YamlDsl
type YamlDsl struct {
	Beans []*OrgApacheCamelDslYamlDeserializersNamedBeanDefinition `json:"beans,omitempty"`
	ErrorHandler *OrgApacheCamelBuilderErrorHandlerBuilderRef `json:"errorHandler,omitempty"`
	From *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer `json:"from,omitempty"`
	OnException *OrgApacheCamelModelOnExceptionDefinition `json:"onException,omitempty"`
	Rest *OrgApacheCamelModelRestRestDefinition `json:"rest,omitempty"`
	Route *OrgApacheCamelModelRouteDefinition `json:"route,omitempty"`
	RouteTemplate *OrgApacheCamelModelRouteTemplateDefinition `json:"route-template,omitempty"`
	Template *OrgApacheCamelModelRouteTemplateDefinition `json:"template,omitempty"`
}

func (strct *OrgApacheCamelDslYamlDeserializersNamedBeanDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersNamedBeanDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition) UnmarshalJSON(b []byte) error {
	stepsReceived := false
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer) UnmarshalJSON(b []byte) error {
	stepsReceived := false
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelClaimCheckDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "filter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"filter\": ")
	if tmp, err := json.Marshal(strct.Filter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Operation" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "operation" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"operation\": ")
	if tmp, err := json.Marshal(strct.Operation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "strategy-method-name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"strategy-method-name\": ")
	if tmp, err := json.Marshal(strct.StrategyMethodName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "strategy-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"strategy-ref\": ")
	if tmp, err := json.Marshal(strct.StrategyRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelClaimCheckDefinition) UnmarshalJSON(b []byte) error {
	operationReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "filter":
			if err := json.Unmarshal([]byte(v), &strct.Filter); err != nil {
				return err
			}
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
		case "operation":
			if err := json.Unmarshal([]byte(v), &strct.Operation); err != nil {
				return err
			}
			operationReceived = true
		case "strategy-method-name":
			if err := json.Unmarshal([]byte(v), &strct.StrategyMethodName); err != nil {
				return err
			}
		case "strategy-ref":
			if err := json.Unmarshal([]byte(v), &strct.StrategyRef); err != nil {
				return err
			}
		}
	}
	// check if operation (a required property) was received
	if !operationReceived {
		return errors.New("\"operation\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "BasePath" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "base-path" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"base-path\": ")
	if tmp, err := json.Marshal(strct.BasePath); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "connection-timeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"connection-timeout\": ")
	if tmp, err := json.Marshal(strct.ConnectionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namespace" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namespace\": ")
	if tmp, err := json.Marshal(strct.Namespace); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Nodes" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "nodes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"nodes\": ")
	if tmp, err := json.Marshal(strct.Nodes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnect-base-sleep-time" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnect-base-sleep-time\": ")
	if tmp, err := json.Marshal(strct.ReconnectBaseSleepTime); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnect-max-retries" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnect-max-retries\": ")
	if tmp, err := json.Marshal(strct.ReconnectMaxRetries); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnect-max-sleep-time" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnect-max-sleep-time\": ")
	if tmp, err := json.Marshal(strct.ReconnectMaxSleepTime); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "session-timeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"session-timeout\": ")
	if tmp, err := json.Marshal(strct.SessionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration) UnmarshalJSON(b []byte) error {
	base_pathReceived := false
	nodesReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "base-path":
			if err := json.Unmarshal([]byte(v), &strct.BasePath); err != nil {
				return err
			}
			base_pathReceived = true
		case "connection-timeout":
			if err := json.Unmarshal([]byte(v), &strct.ConnectionTimeout); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "namespace":
			if err := json.Unmarshal([]byte(v), &strct.Namespace); err != nil {
				return err
			}
		case "nodes":
			if err := json.Unmarshal([]byte(v), &strct.Nodes); err != nil {
				return err
			}
			nodesReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "reconnect-base-sleep-time":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectBaseSleepTime); err != nil {
				return err
			}
		case "reconnect-max-retries":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectMaxRetries); err != nil {
				return err
			}
		case "reconnect-max-sleep-time":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectMaxSleepTime); err != nil {
				return err
			}
		case "session-timeout":
			if err := json.Unmarshal([]byte(v), &strct.SessionTimeout); err != nil {
				return err
			}
		}
	}
	// check if base-path (a required property) was received
	if !base_pathReceived {
		return errors.New("\"base-path\" is required but was not present")
	}
	// check if nodes (a required property) was received
	if !nodesReceived {
		return errors.New("\"nodes\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatBeanioDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "bean-reader-error-handler-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"bean-reader-error-handler-type\": ")
	if tmp, err := json.Marshal(strct.BeanReaderErrorHandlerType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "encoding" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"encoding\": ")
	if tmp, err := json.Marshal(strct.Encoding); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignore-invalid-records" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignore-invalid-records\": ")
	if tmp, err := json.Marshal(strct.IgnoreInvalidRecords); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignore-unexpected-records" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignore-unexpected-records\": ")
	if tmp, err := json.Marshal(strct.IgnoreUnexpectedRecords); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignore-unidentified-records" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignore-unidentified-records\": ")
	if tmp, err := json.Marshal(strct.IgnoreUnidentifiedRecords); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Mapping" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "mapping" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"mapping\": ")
	if tmp, err := json.Marshal(strct.Mapping); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "StreamName" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "stream-name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"stream-name\": ")
	if tmp, err := json.Marshal(strct.StreamName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "unmarshal-single-object" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"unmarshal-single-object\": ")
	if tmp, err := json.Marshal(strct.UnmarshalSingleObject); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatBeanioDataFormat) UnmarshalJSON(b []byte) error {
	mappingReceived := false
	stream_nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "bean-reader-error-handler-type":
			if err := json.Unmarshal([]byte(v), &strct.BeanReaderErrorHandlerType); err != nil {
				return err
			}
		case "encoding":
			if err := json.Unmarshal([]byte(v), &strct.Encoding); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignore-invalid-records":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreInvalidRecords); err != nil {
				return err
			}
		case "ignore-unexpected-records":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreUnexpectedRecords); err != nil {
				return err
			}
		case "ignore-unidentified-records":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreUnidentifiedRecords); err != nil {
				return err
			}
		case "mapping":
			if err := json.Unmarshal([]byte(v), &strct.Mapping); err != nil {
				return err
			}
			mappingReceived = true
		case "stream-name":
			if err := json.Unmarshal([]byte(v), &strct.StreamName); err != nil {
				return err
			}
			stream_nameReceived = true
		case "unmarshal-single-object":
			if err := json.Unmarshal([]byte(v), &strct.UnmarshalSingleObject); err != nil {
				return err
			}
		}
	}
	// check if mapping (a required property) was received
	if !mappingReceived {
		return errors.New("\"mapping\" is required but was not present")
	}
	// check if stream-name (a required property) was received
	if !stream_nameReceived {
		return errors.New("\"stream-name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatBindyDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allow-empty-stream" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allow-empty-stream\": ")
	if tmp, err := json.Marshal(strct.AllowEmptyStream); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "class-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"class-type\": ")
	if tmp, err := json.Marshal(strct.ClassType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "locale" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"locale\": ")
	if tmp, err := json.Marshal(strct.Locale); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "unwrap-single-instance" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"unwrap-single-instance\": ")
	if tmp, err := json.Marshal(strct.UnwrapSingleInstance); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatBindyDataFormat) UnmarshalJSON(b []byte) error {
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allow-empty-stream":
			if err := json.Unmarshal([]byte(v), &strct.AllowEmptyStream); err != nil {
				return err
			}
		case "class-type":
			if err := json.Unmarshal([]byte(v), &strct.ClassType); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "locale":
			if err := json.Unmarshal([]byte(v), &strct.Locale); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		case "unwrap-single-instance":
			if err := json.Unmarshal([]byte(v), &strct.UnwrapSingleInstance); err != nil {
				return err
			}
		}
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatGrokDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allow-multiple-matches-per-line" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allow-multiple-matches-per-line\": ")
	if tmp, err := json.Marshal(strct.AllowMultipleMatchesPerLine); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "flattened" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"flattened\": ")
	if tmp, err := json.Marshal(strct.Flattened); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "named-only" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"named-only\": ")
	if tmp, err := json.Marshal(strct.NamedOnly); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Pattern" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatGrokDataFormat) UnmarshalJSON(b []byte) error {
	patternReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allow-multiple-matches-per-line":
			if err := json.Unmarshal([]byte(v), &strct.AllowMultipleMatchesPerLine); err != nil {
				return err
			}
		case "flattened":
			if err := json.Unmarshal([]byte(v), &strct.Flattened); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "named-only":
			if err := json.Unmarshal([]byte(v), &strct.NamedOnly); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
			patternReceived = true
		}
	}
	// check if pattern (a required property) was received
	if !patternReceived {
		return errors.New("\"pattern\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatJaxbDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "content-type-header" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"content-type-header\": ")
	if tmp, err := json.Marshal(strct.ContentTypeHeader); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ContextPath" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "context-path" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"context-path\": ")
	if tmp, err := json.Marshal(strct.ContextPath); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "context-path-is-class-name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"context-path-is-class-name\": ")
	if tmp, err := json.Marshal(strct.ContextPathIsClassName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "encoding" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"encoding\": ")
	if tmp, err := json.Marshal(strct.Encoding); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "filter-non-xml-chars" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"filter-non-xml-chars\": ")
	if tmp, err := json.Marshal(strct.FilterNonXmlChars); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "fragment" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"fragment\": ")
	if tmp, err := json.Marshal(strct.Fragment); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignore-jaxb-element" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignore-jaxb-element\": ")
	if tmp, err := json.Marshal(strct.IgnoreJaxbElement); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "jaxb-provider-properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"jaxb-provider-properties\": ")
	if tmp, err := json.Marshal(strct.JaxbProviderProperties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "must-be-jaxb-element" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"must-be-jaxb-element\": ")
	if tmp, err := json.Marshal(strct.MustBeJaxbElement); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namespace-prefix-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namespace-prefix-ref\": ")
	if tmp, err := json.Marshal(strct.NamespacePrefixRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "no-namespace-schema-location" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"no-namespace-schema-location\": ")
	if tmp, err := json.Marshal(strct.NoNamespaceSchemaLocation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "object-factory" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"object-factory\": ")
	if tmp, err := json.Marshal(strct.ObjectFactory); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "part-class" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"part-class\": ")
	if tmp, err := json.Marshal(strct.PartClass); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "part-namespace" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"part-namespace\": ")
	if tmp, err := json.Marshal(strct.PartNamespace); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pretty-print" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pretty-print\": ")
	if tmp, err := json.Marshal(strct.PrettyPrint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schema" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schema\": ")
	if tmp, err := json.Marshal(strct.Schema); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schema-location" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schema-location\": ")
	if tmp, err := json.Marshal(strct.SchemaLocation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schema-severity-level" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schema-severity-level\": ")
	if tmp, err := json.Marshal(strct.SchemaSeverityLevel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "xml-stream-writer-wrapper" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"xml-stream-writer-wrapper\": ")
	if tmp, err := json.Marshal(strct.XmlStreamWriterWrapper); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatJaxbDataFormat) UnmarshalJSON(b []byte) error {
	context_pathReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "content-type-header":
			if err := json.Unmarshal([]byte(v), &strct.ContentTypeHeader); err != nil {
				return err
			}
		case "context-path":
			if err := json.Unmarshal([]byte(v), &strct.ContextPath); err != nil {
				return err
			}
			context_pathReceived = true
		case "context-path-is-class-name":
			if err := json.Unmarshal([]byte(v), &strct.ContextPathIsClassName); err != nil {
				return err
			}
		case "encoding":
			if err := json.Unmarshal([]byte(v), &strct.Encoding); err != nil {
				return err
			}
		case "filter-non-xml-chars":
			if err := json.Unmarshal([]byte(v), &strct.FilterNonXmlChars); err != nil {
				return err
			}
		case "fragment":
			if err := json.Unmarshal([]byte(v), &strct.Fragment); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignore-jaxb-element":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreJaxbElement); err != nil {
				return err
			}
		case "jaxb-provider-properties":
			if err := json.Unmarshal([]byte(v), &strct.JaxbProviderProperties); err != nil {
				return err
			}
		case "must-be-jaxb-element":
			if err := json.Unmarshal([]byte(v), &strct.MustBeJaxbElement); err != nil {
				return err
			}
		case "namespace-prefix-ref":
			if err := json.Unmarshal([]byte(v), &strct.NamespacePrefixRef); err != nil {
				return err
			}
		case "no-namespace-schema-location":
			if err := json.Unmarshal([]byte(v), &strct.NoNamespaceSchemaLocation); err != nil {
				return err
			}
		case "object-factory":
			if err := json.Unmarshal([]byte(v), &strct.ObjectFactory); err != nil {
				return err
			}
		case "part-class":
			if err := json.Unmarshal([]byte(v), &strct.PartClass); err != nil {
				return err
			}
		case "part-namespace":
			if err := json.Unmarshal([]byte(v), &strct.PartNamespace); err != nil {
				return err
			}
		case "pretty-print":
			if err := json.Unmarshal([]byte(v), &strct.PrettyPrint); err != nil {
				return err
			}
		case "schema":
			if err := json.Unmarshal([]byte(v), &strct.Schema); err != nil {
				return err
			}
		case "schema-location":
			if err := json.Unmarshal([]byte(v), &strct.SchemaLocation); err != nil {
				return err
			}
		case "schema-severity-level":
			if err := json.Unmarshal([]byte(v), &strct.SchemaSeverityLevel); err != nil {
				return err
			}
		case "xml-stream-writer-wrapper":
			if err := json.Unmarshal([]byte(v), &strct.XmlStreamWriterWrapper); err != nil {
				return err
			}
		}
	}
	// check if context-path (a required property) was received
	if !context_pathReceived {
		return errors.New("\"context-path\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelGlobalOptionDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelGlobalOptionDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelIdempotentConsumerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "completion-eager" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completion-eager\": ")
	if tmp, err := json.Marshal(strct.CompletionEager); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "eager" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"eager\": ")
	if tmp, err := json.Marshal(strct.Eager); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "MessageIdRepositoryRef" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "message-id-repository-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"message-id-repository-ref\": ")
	if tmp, err := json.Marshal(strct.MessageIdRepositoryRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "remove-on-failure" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"remove-on-failure\": ")
	if tmp, err := json.Marshal(strct.RemoveOnFailure); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "skip-duplicate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"skip-duplicate\": ")
	if tmp, err := json.Marshal(strct.SkipDuplicate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelIdempotentConsumerDefinition) UnmarshalJSON(b []byte) error {
	message_id_repository_refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "completion-eager":
			if err := json.Unmarshal([]byte(v), &strct.CompletionEager); err != nil {
				return err
			}
		case "eager":
			if err := json.Unmarshal([]byte(v), &strct.Eager); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "message-id-repository-ref":
			if err := json.Unmarshal([]byte(v), &strct.MessageIdRepositoryRef); err != nil {
				return err
			}
			message_id_repository_refReceived = true
		case "remove-on-failure":
			if err := json.Unmarshal([]byte(v), &strct.RemoveOnFailure); err != nil {
				return err
			}
		case "skip-duplicate":
			if err := json.Unmarshal([]byte(v), &strct.SkipDuplicate); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		}
	}
	// check if message-id-repository-ref (a required property) was received
	if !message_id_repository_refReceived {
		return errors.New("\"message-id-repository-ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelInputTypeDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Urn" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "urn" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"urn\": ")
	if tmp, err := json.Marshal(strct.Urn); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validate\": ")
	if tmp, err := json.Marshal(strct.Validate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelInputTypeDefinition) UnmarshalJSON(b []byte) error {
	urnReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "urn":
			if err := json.Unmarshal([]byte(v), &strct.Urn); err != nil {
				return err
			}
			urnReceived = true
		case "validate":
			if err := json.Unmarshal([]byte(v), &strct.Validate); err != nil {
				return err
			}
		}
	}
	// check if urn (a required property) was received
	if !urnReceived {
		return errors.New("\"urn\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageLanguageExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Language" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "language" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageLanguageExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	languageReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "language":
			if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
				return err
			}
			languageReceived = true
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	// check if language (a required property) was received
	if !languageReceived {
		return errors.New("\"language\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "DistributionRatio" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "distribution-ratio" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"distribution-ratio\": ")
	if tmp, err := json.Marshal(strct.DistributionRatio); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "distribution-ratio-delimiter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"distribution-ratio-delimiter\": ")
	if tmp, err := json.Marshal(strct.DistributionRatioDelimiter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "round-robin" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"round-robin\": ")
	if tmp, err := json.Marshal(strct.RoundRobin); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition) UnmarshalJSON(b []byte) error {
	distribution_ratioReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "distribution-ratio":
			if err := json.Unmarshal([]byte(v), &strct.DistributionRatio); err != nil {
				return err
			}
			distribution_ratioReceived = true
		case "distribution-ratio-delimiter":
			if err := json.Unmarshal([]byte(v), &strct.DistributionRatioDelimiter); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "round-robin":
			if err := json.Unmarshal([]byte(v), &strct.RoundRobin); err != nil {
				return err
			}
		}
	}
	// check if distribution-ratio (a required property) was received
	if !distribution_ratioReceived {
		return errors.New("\"distribution-ratio\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelOutputTypeDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Urn" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "urn" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"urn\": ")
	if tmp, err := json.Marshal(strct.Urn); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validate\": ")
	if tmp, err := json.Marshal(strct.Validate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelOutputTypeDefinition) UnmarshalJSON(b []byte) error {
	urnReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "urn":
			if err := json.Unmarshal([]byte(v), &strct.Urn); err != nil {
				return err
			}
			urnReceived = true
		case "validate":
			if err := json.Unmarshal([]byte(v), &strct.Validate); err != nil {
				return err
			}
		}
	}
	// check if urn (a required property) was received
	if !urnReceived {
		return errors.New("\"urn\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPolicyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPolicyDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelProcessDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelProcessDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPropertyDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelResequenceDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "batch-config" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"batch-config\": ")
	if tmp, err := json.Marshal(strct.BatchConfig); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	if strct.Expression == nil {
		return nil, errors.New("expression is a required field")
	}
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "stream-config" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"stream-config\": ")
	if tmp, err := json.Marshal(strct.StreamConfig); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelResequenceDefinition) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "batch-config":
			if err := json.Unmarshal([]byte(v), &strct.BatchConfig); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		case "stream-config":
			if err := json.Unmarshal([]byte(v), &strct.StreamConfig); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestContextRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestContextRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestOperationParamDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "array-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"array-type\": ")
	if tmp, err := json.Marshal(strct.ArrayType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "collection-format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"collection-format\": ")
	if tmp, err := json.Marshal(strct.CollectionFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "data-format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"data-format\": ")
	if tmp, err := json.Marshal(strct.DataFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "data-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"data-type\": ")
	if tmp, err := json.Marshal(strct.DataType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "default-value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"default-value\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "examples" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"examples\": ")
	if tmp, err := json.Marshal(strct.Examples); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "required" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"required\": ")
	if tmp, err := json.Marshal(strct.Required); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestOperationParamDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "array-type":
			if err := json.Unmarshal([]byte(v), &strct.ArrayType); err != nil {
				return err
			}
		case "collection-format":
			if err := json.Unmarshal([]byte(v), &strct.CollectionFormat); err != nil {
				return err
			}
		case "data-format":
			if err := json.Unmarshal([]byte(v), &strct.DataFormat); err != nil {
				return err
			}
		case "data-type":
			if err := json.Unmarshal([]byte(v), &strct.DataType); err != nil {
				return err
			}
		case "default-value":
			if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "examples":
			if err := json.Unmarshal([]byte(v), &strct.Examples); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "required":
			if err := json.Unmarshal([]byte(v), &strct.Required); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestOperationResponseHeaderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "array-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"array-type\": ")
	if tmp, err := json.Marshal(strct.ArrayType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "collection-format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"collection-format\": ")
	if tmp, err := json.Marshal(strct.CollectionFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "data-format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"data-format\": ")
	if tmp, err := json.Marshal(strct.DataFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "data-type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"data-type\": ")
	if tmp, err := json.Marshal(strct.DataType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "example" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"example\": ")
	if tmp, err := json.Marshal(strct.Example); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestOperationResponseHeaderDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "array-type":
			if err := json.Unmarshal([]byte(v), &strct.ArrayType); err != nil {
				return err
			}
		case "collection-format":
			if err := json.Unmarshal([]byte(v), &strct.CollectionFormat); err != nil {
				return err
			}
		case "data-format":
			if err := json.Unmarshal([]byte(v), &strct.DataFormat); err != nil {
				return err
			}
		case "data-type":
			if err := json.Unmarshal([]byte(v), &strct.DataType); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "example":
			if err := json.Unmarshal([]byte(v), &strct.Example); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestOperationResponseMsgDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "code" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "examples" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"examples\": ")
	if tmp, err := json.Marshal(strct.Examples); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "header" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"header\": ")
	if tmp, err := json.Marshal(strct.Header); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Message" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "message" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "response-model" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"response-model\": ")
	if tmp, err := json.Marshal(strct.ResponseModel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestOperationResponseMsgDefinition) UnmarshalJSON(b []byte) error {
	messageReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "code":
			if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
				return err
			}
		case "examples":
			if err := json.Unmarshal([]byte(v), &strct.Examples); err != nil {
				return err
			}
		case "header":
			if err := json.Unmarshal([]byte(v), &strct.Header); err != nil {
				return err
			}
		case "message":
			if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
				return err
			}
			messageReceived = true
		case "response-model":
			if err := json.Unmarshal([]byte(v), &strct.ResponseModel); err != nil {
				return err
			}
		}
	}
	// check if message (a required property) was received
	if !messageReceived {
		return errors.New("\"message\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestPropertyDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityApiKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "in-cookie" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"in-cookie\": ")
	if tmp, err := json.Marshal(strct.InCookie); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "in-header" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"in-header\": ")
	if tmp, err := json.Marshal(strct.InHeader); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "in-query" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"in-query\": ")
	if tmp, err := json.Marshal(strct.InQuery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityApiKey) UnmarshalJSON(b []byte) error {
	keyReceived := false
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "in-cookie":
			if err := json.Unmarshal([]byte(v), &strct.InCookie); err != nil {
				return err
			}
		case "in-header":
			if err := json.Unmarshal([]byte(v), &strct.InHeader); err != nil {
				return err
			}
		case "in-query":
			if err := json.Unmarshal([]byte(v), &strct.InQuery); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityBasicAuth) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityBasicAuth) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityBearerToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"format\": ")
	if tmp, err := json.Marshal(strct.Format); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityBearerToken) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "format":
			if err := json.Unmarshal([]byte(v), &strct.Format); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityMutualTLS) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityMutualTLS) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityOAuth2) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "authorization-url" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"authorization-url\": ")
	if tmp, err := json.Marshal(strct.AuthorizationUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "flow" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"flow\": ")
	if tmp, err := json.Marshal(strct.Flow); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "refresh-url" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"refresh-url\": ")
	if tmp, err := json.Marshal(strct.RefreshUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "scopes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"scopes\": ")
	if tmp, err := json.Marshal(strct.Scopes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "token-url" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"token-url\": ")
	if tmp, err := json.Marshal(strct.TokenUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityOAuth2) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "authorization-url":
			if err := json.Unmarshal([]byte(v), &strct.AuthorizationUrl); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "flow":
			if err := json.Unmarshal([]byte(v), &strct.Flow); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "refresh-url":
			if err := json.Unmarshal([]byte(v), &strct.RefreshUrl); err != nil {
				return err
			}
		case "scopes":
			if err := json.Unmarshal([]byte(v), &strct.Scopes); err != nil {
				return err
			}
		case "token-url":
			if err := json.Unmarshal([]byte(v), &strct.TokenUrl); err != nil {
				return err
			}
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestSecurityOpenIdConnect) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Url" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "url" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestSecurityOpenIdConnect) UnmarshalJSON(b []byte) error {
	keyReceived := false
	urlReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "url":
			if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
				return err
			}
			urlReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if url (a required property) was received
	if !urlReceived {
		return errors.New("\"url\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestSecurityDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "scopes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"scopes\": ")
	if tmp, err := json.Marshal(strct.Scopes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestSecurityDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "scopes":
			if err := json.Unmarshal([]byte(v), &strct.Scopes); err != nil {
				return err
			}
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteContextRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteContextRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "From" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "from" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"from\": ")
	if tmp, err := json.Marshal(strct.From); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "group" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"group\": ")
	if tmp, err := json.Marshal(strct.Group); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "route-configuration-id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"route-configuration-id\": ")
	if tmp, err := json.Marshal(strct.RouteConfigurationId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteDefinition) UnmarshalJSON(b []byte) error {
	fromReceived := false
	stepsReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "from":
			if err := json.Unmarshal([]byte(v), &strct.From); err != nil {
				return err
			}
			fromReceived = true
		case "group":
			if err := json.Unmarshal([]byte(v), &strct.Group); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "route-configuration-id":
			if err := json.Unmarshal([]byte(v), &strct.RouteConfigurationId); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		}
	}
	// check if from (a required property) was received
	if !fromReceived {
		return errors.New("\"from\" is required but was not present")
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteTemplateDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "beans" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"beans\": ")
	if tmp, err := json.Marshal(strct.Beans); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "From" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "from" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"from\": ")
	if tmp, err := json.Marshal(strct.From); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Id" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteTemplateDefinition) UnmarshalJSON(b []byte) error {
	fromReceived := false
	idReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "beans":
			if err := json.Unmarshal([]byte(v), &strct.Beans); err != nil {
				return err
			}
		case "from":
			if err := json.Unmarshal([]byte(v), &strct.From); err != nil {
				return err
			}
			fromReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
			idReceived = true
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		}
	}
	// check if from (a required property) was received
	if !fromReceived {
		return errors.New("\"from\" is required but was not present")
	}
	// check if id (a required property) was received
	if !idReceived {
		return errors.New("\"id\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteTemplateParameterDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "default-value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"default-value\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "required" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"required\": ")
	if tmp, err := json.Marshal(strct.Required); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteTemplateParameterDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "default-value":
			if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "required":
			if err := json.Unmarshal([]byte(v), &strct.Required); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSagaOptionDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "OptionName" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "option-name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"option-name\": ")
	if tmp, err := json.Marshal(strct.OptionName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSagaOptionDefinition) UnmarshalJSON(b []byte) error {
	option_nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "option-name":
			if err := json.Unmarshal([]byte(v), &strct.OptionName); err != nil {
				return err
			}
			option_nameReceived = true
		}
	}
	// check if option-name (a required property) was received
	if !option_nameReceived {
		return errors.New("\"option-name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSetHeaderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSetHeaderDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSetPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSetPropertyDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelWireTapDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allow-optimised-components" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allow-optimised-components\": ")
	if tmp, err := json.Marshal(strct.AllowOptimisedComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "auto-start-components" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"auto-start-components\": ")
	if tmp, err := json.Marshal(strct.AutoStartComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "body" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"body\": ")
	if tmp, err := json.Marshal(strct.Body); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "cache-size" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"cache-size\": ")
	if tmp, err := json.Marshal(strct.CacheSize); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "copy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"copy\": ")
	if tmp, err := json.Marshal(strct.Copy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dynamic-uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dynamic-uri\": ")
	if tmp, err := json.Marshal(strct.DynamicUri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "executor-service-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"executor-service-ref\": ")
	if tmp, err := json.Marshal(strct.ExecutorServiceRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignore-invalid-endpoint" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignore-invalid-endpoint\": ")
	if tmp, err := json.Marshal(strct.IgnoreInvalidEndpoint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inherit-error-handler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inherit-error-handler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "on-prepare-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"on-prepare-ref\": ")
	if tmp, err := json.Marshal(strct.OnPrepareRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "processor-ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"processor-ref\": ")
	if tmp, err := json.Marshal(strct.ProcessorRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "set-header" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"set-header\": ")
	if tmp, err := json.Marshal(strct.SetHeader); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelWireTapDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allow-optimised-components":
			if err := json.Unmarshal([]byte(v), &strct.AllowOptimisedComponents); err != nil {
				return err
			}
		case "auto-start-components":
			if err := json.Unmarshal([]byte(v), &strct.AutoStartComponents); err != nil {
				return err
			}
		case "body":
			if err := json.Unmarshal([]byte(v), &strct.Body); err != nil {
				return err
			}
		case "cache-size":
			if err := json.Unmarshal([]byte(v), &strct.CacheSize); err != nil {
				return err
			}
		case "copy":
			if err := json.Unmarshal([]byte(v), &strct.Copy); err != nil {
				return err
			}
		case "dynamic-uri":
			if err := json.Unmarshal([]byte(v), &strct.DynamicUri); err != nil {
				return err
			}
		case "executor-service-ref":
			if err := json.Unmarshal([]byte(v), &strct.ExecutorServiceRef); err != nil {
				return err
			}
		case "ignore-invalid-endpoint":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreInvalidEndpoint); err != nil {
				return err
			}
		case "inherit-error-handler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "on-prepare-ref":
			if err := json.Unmarshal([]byte(v), &strct.OnPrepareRef); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
		case "processor-ref":
			if err := json.Unmarshal([]byte(v), &strct.ProcessorRef); err != nil {
				return err
			}
		case "set-header":
			if err := json.Unmarshal([]byte(v), &strct.SetHeader); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}
