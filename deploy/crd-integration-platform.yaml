# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: integrationplatforms.camel.apache.org
  labels:
    app: "camel-k"
spec:
  additionalPrinterColumns:
    - JSONPath: .status.phase
      description: The integration platform phase
      name: Phase
      type: string
  group: camel.apache.org
  names:
    categories:
      - kamel
      - camel
    kind: IntegrationPlatform
    listKind: IntegrationPlatformList
    plural: integrationplatforms
    shortNames:
      - ip
    singular: integrationplatform
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: IntegrationPlatform is the Schema for the integrationplatforms
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: IntegrationPlatformSpec defines the desired state of IntegrationPlatform
          properties:
            build:
              description: IntegrationPlatformBuildSpec contains platform related
                build information
              properties:
                baseImage:
                  type: string
                buildStrategy:
                  description: IntegrationPlatformBuildStrategy enumerates all implemented
                    build strategies
                  type: string
                httpProxySecret:
                  type: string
                kanikoBuildCache:
                  type: boolean
                maven:
                  description: MavenSpec --
                  properties:
                    localRepository:
                      type: string
                    settings:
                      description: ValueSource --
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key
                                must be defined
                              type: boolean
                          required:
                            - key
                          type: object
                        secretKeyRef:
                          description: Selects a key of a secret.
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                            - key
                          type: object
                      type: object
                    timeout:
                      type: string
                  type: object
                persistentVolumeClaim:
                  type: string
                properties:
                  additionalProperties:
                    type: string
                  type: object
                publishStrategy:
                  description: IntegrationPlatformBuildPublishStrategy enumerates
                    all implemented publish strategies
                  type: string
                registry:
                  description: IntegrationPlatformRegistrySpec --
                  properties:
                    address:
                      type: string
                    ca:
                      type: string
                    insecure:
                      type: boolean
                    organization:
                      type: string
                    secret:
                      type: string
                  type: object
                runtimeProvider:
                  description: RuntimeProvider --
                  type: string
                runtimeVersion:
                  type: string
                timeout:
                  type: string
              type: object
            cluster:
              description: IntegrationPlatformCluster is the kind of orchestration
                cluster the platform is installed into
              type: string
            configuration:
              items:
                description: ConfigurationSpec --
                properties:
                  type:
                    type: string
                  value:
                    type: string
                required:
                  - type
                  - value
                type: object
              type: array
            profile:
              description: TraitProfile represents lists of traits that are enabled
                for the specific installation/integration
              type: string
            resources:
              description: IntegrationPlatformResourcesSpec contains platform related
                resources
              properties:
                kits:
                  items:
                    type: string
                  type: array
              type: object
            traits:
              description: Traits --
              properties:
                affinity:
                  description: "Allows constraining which nodes the integration pod(s)
                    are eligible to be scheduled on, based on labels on the node,
                    or with inter-pod affinity and anti-affinity, based on labels
                    on pods that are already running on the nodes. \n Itâ€™s disabled
                    by default."
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    nodeAffinityLabels:
                      description: Defines a set of nodes the integration pod(s) are
                        eligible to be scheduled on, based on labels on the node.
                      items:
                        type: string
                      type: array
                    podAffinity:
                      description: Always co-locates multiple replicas of the integration
                        in the same node (default *false*).
                      type: boolean
                    podAffinityLabels:
                      description: Defines a set of pods (namely those matching the
                        label selector, relative to the given namespace) that the
                        integration pod(s) should be co-located with.
                      items:
                        type: string
                      type: array
                    podAntiAffinity:
                      description: Never co-locates multiple replicas of the integration
                        in the same node (default *false*).
                      type: boolean
                    podAntiAffinityLabels:
                      description: Defines a set of pods (namely those matching the
                        label selector, relative to the given namespace) that the
                        integration pod(s) should not be co-located with.
                      items:
                        type: string
                      type: array
                  type: object
                builder:
                  description: The builder trait is internally used to determine the
                    best strategy to build and configure IntegrationKits.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    verbose:
                      description: Enable verbose logging on build components that
                        support it (e.g. Kaniko build pod).
                      type: boolean
                  type: object
                camel:
                  description: The Camel trait can be used to configure versions of
                    Apache Camel K runtime and related libraries, it cannot be disabled.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    runtimeVersion:
                      description: The camel-k-runtime version to use for the integration.
                        It overrides the default version set in the Integration Platform.
                      type: string
                  type: object
                container:
                  description: "The Container trait can be used to configure properties
                    of the container where the integration will run. \n It also provides
                    configuration for Services associated to the container."
                  properties:
                    auto:
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    expose:
                      description: Can be used to enable/disable exposure via kubernetes
                        Service.
                      type: boolean
                    limitCPU:
                      description: The maximum amount of CPU required.
                      type: string
                    limitMemory:
                      description: The maximum amount of memory required.
                      type: string
                    livenessFailureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Applies to the liveness
                        probe.
                      format: int32
                      type: integer
                    livenessInitialDelay:
                      description: Number of seconds after the container has started
                        before liveness probes are initiated.
                      format: int32
                      type: integer
                    livenessPeriod:
                      description: How often to perform the probe. Applies to the
                        liveness probe.
                      format: int32
                      type: integer
                    livenessSuccessThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Applies to the
                        liveness probe.
                      format: int32
                      type: integer
                    livenessTimeout:
                      description: Number of seconds after which the probe times out.
                        Applies to the liveness probe.
                      format: int32
                      type: integer
                    name:
                      description: The main container name. It's named `integration`
                        by default.
                      type: string
                    port:
                      description: To configure a different port exposed by the container
                        (default `8080`).
                      type: integer
                    portName:
                      description: To configure a different port name for the port
                        exposed by the container (default `http`).
                      type: string
                    probePath:
                      description: Path to access on the probe ( default `/health`).
                        Note that this property is not supported on quarkus runtime
                        and setting it will result in the integration failing to start.
                      type: string
                    probesEnabled:
                      description: ProbesEnabled enable/disable probes on the container
                        (default `false`)
                      type: boolean
                    readinessFailureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Applies to the readiness
                        probe.
                      format: int32
                      type: integer
                    readinessInitialDelay:
                      description: Number of seconds after the container has started
                        before readiness probes are initiated.
                      format: int32
                      type: integer
                    readinessPeriod:
                      description: How often to perform the probe. Applies to the
                        readiness probe.
                      format: int32
                      type: integer
                    readinessSuccessThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Applies to the
                        readiness probe.
                      format: int32
                      type: integer
                    readinessTimeout:
                      description: Number of seconds after which the probe times out.
                        Applies to the readiness probe.
                      format: int32
                      type: integer
                    requestCPU:
                      description: The minimum amount of CPU required.
                      type: string
                    requestMemory:
                      description: The minimum amount of memory required.
                      type: string
                    servicePort:
                      description: To configure under which service port the container
                        port is to be exposed (default `80`).
                      type: integer
                    servicePortName:
                      description: To configure under which service port name the
                        container port is to be exposed (default `http`).
                      type: string
                  type: object
                cron:
                  description: "The Cron trait can be used to customize the behaviour
                    of periodic timer/cron based integrations. \n While normally an
                    integration requires a pod to be always up and running, some periodic
                    tasks, such as batch jobs, require to be activated at specific
                    hours of the day or with a periodic delay of minutes. For such
                    tasks, the cron trait can materialize the integration as a Kubernetes
                    CronJob instead of a standard deployment, in order to save resources
                    when the integration does not need to be executed. \n Integrations
                    that start from the following components are evaluated by the
                    cron trait: `timer`, `cron`, `quartz`. \n The rules for using
                    a Kubernetes CronJob are the following: - `timer`: when periods
                    can be written as cron expressions. E.g. `timer:tick?period=60000`.
                    - `cron`, `quartz`: when the cron expression does not contain
                    seconds (or the \"seconds\" part is set to 0). E.g.   `cron:tab?schedule=0/2${plus}*{plus}*{plus}*{plus}?`
                    or `quartz:trigger?cron=0{plus}0/2{plus}*{plus}*{plus}*{plus}?`."
                  properties:
                    auto:
                      description: "Automatically deploy the integration as CronJob
                        when all routes are either starting from a periodic consumer
                        (only `cron`, `timer` and `quartz` are supported) or a passive
                        consumer (e.g. `direct` is a passive consumer). \n It's required
                        that all periodic consumers have the same period and it can
                        be expressed as cron schedule (e.g. `1m` can be expressed
                        as `0/1 * * * *`, while `35m` or `50s` cannot)."
                      type: boolean
                    components:
                      description: "A comma separated list of the Camel components
                        that need to be customized in order for them to work when
                        the schedule is triggered externally by Kubernetes. A specific
                        customizer is activated for each specified component. E.g.
                        for the `timer` component, the `cron-timer` customizer is
                        activated (it's present in the `org.apache.camel.k:camel-k-runtime-cron`
                        library). \n Supported components are currently: `cron`, `timer`
                        and `quartz`."
                      type: string
                    concurrencyPolicy:
                      description: 'Specifies how to treat concurrent executions of
                        a Job. Valid values are: - "Allow": allows CronJobs to run
                        concurrently; - "Forbid" (default): forbids concurrent runs,
                        skipping next run if previous run hasn''t finished yet; -
                        "Replace": cancels currently running job and replaces it with
                        a new one'
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    fallback:
                      description: Use the default Camel implementation of the `cron`
                        endpoint (`quartz`) instead of trying to materialize the integration
                        as Kubernetes CronJob.
                      type: boolean
                    schedule:
                      description: The CronJob schedule for the whole integration.
                        If multiple routes are declared, they must have the same schedule
                        for this mechanism to work correctly.
                      type: string
                  type: object
                dependencies:
                  description: The Dependencies trait is internally used to automatically
                    add runtime dependencies based on the integration that the user
                    wants to run.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                deployer:
                  description: The deployer trait can be used to explicitly select
                    the kind of high level resource that will deploy the integration.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    kind:
                      description: Allows to explicitly select the desired deployment
                        kind between `deployment`, `cron-job` or `knative-service`
                        when creating the resources for running the integration.
                      type: string
                  type: object
                deployment:
                  description: The Deployment trait is responsible for generating
                    the Kubernetes deployment that will make sure the integration
                    will run in the cluster.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                environment:
                  description: The environment trait is used internally to inject
                    standard environment variables in the integration container, such
                    as `NAMESPACE`, `POD_NAME` and others.
                  properties:
                    containerMeta:
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                gc:
                  description: The GC Trait garbage-collects all resources that are
                    no longer necessary upon integration updates.
                  properties:
                    discoveryCache:
                      description: Discovery client cache to be used, either `disabled`,
                        `disk` or `memory` (default `memory`)
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                ingress:
                  description: "The Ingress trait can be used to expose the service
                    associated with the integration to the outside world with a Kubernetes
                    Ingress. \n It's enabled by default whenever a Service is added
                    to the integration (through the `service` trait)."
                  properties:
                    auto:
                      description: To automatically add an ingress whenever the integration
                        uses a HTTP endpoint consumer.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    host:
                      description: '**Required**. To configure the host exposed by
                        the ingress.'
                      type: string
                  type: object
                istio:
                  description: The Istio trait allows to configure properties related
                    to the Istio service mesh, such as sidecar injection and outbound
                    IP ranges.
                  properties:
                    allow:
                      description: Configures a (comma-separated) list of CIDR subnets
                        that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16`
                        by default).
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    inject:
                      description: Forces the value for labels `sidecar.istio.io/inject`.
                        By default the label is set to `true` on deployment and not
                        set on Knative Service.
                      type: boolean
                  type: object
                jolokia:
                  description: "The Jolokia trait activates and configures the Jolokia
                    Java agent. \n See https://jolokia.org/reference/html/agents.html"
                  properties:
                    CACert:
                      description: The PEM encoded CA certification file path, used
                        to verify client certificates, applicable when `protocol`
                        is `https` and `use-ssl-client-authentication` is `true` (default
                        `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt`
                        for OpenShift).
                      type: string
                    clientPrincipal:
                      description: The principal(s) which must be given in a client
                        certificate to allow access to the Jolokia endpoint, applicable
                        when `protocol` is `https` and `use-ssl-client-authentication`
                        is `true` (default `clientPrincipal=cn=system:master-proxy`,
                        `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc`
                        for OpenShift).
                      items:
                        type: string
                      type: array
                    discoveryEnabled:
                      description: Listen for multicast requests (default `false`)
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    extendedClientCheck:
                      description: Mandate the client certificate contains a client
                        flag in the extended key usage section, applicable when `protocol`
                        is `https` and `use-ssl-client-authentication` is `true` (default
                        `true` for OpenShift).
                      type: boolean
                    host:
                      description: The Host address to which the Jolokia agent should
                        bind to. If `"\*"` or `"0.0.0.0"` is given, the servers binds
                        to every network interface (default `"*"`).
                      type: string
                    options:
                      description: A list of additional Jolokia options as defined
                        in https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM
                        agent configuration options]
                      items:
                        type: string
                      type: array
                    password:
                      description: The password used for authentication, applicable
                        when the `user` option is set.
                      type: string
                    port:
                      description: The Jolokia endpoint port (default `8778`).
                      type: integer
                    protocol:
                      description: The protocol to use, either `http` or `https` (default
                        `https` for OpenShift)
                      type: string
                    useSSLClientAuthentication:
                      description: Whether client certificates should be used for
                        authentication (default `true` for OpenShift).
                      type: boolean
                    user:
                      description: The user to be used for authentication
                      type: string
                  type: object
                jvm:
                  description: The JVM trait is used to configure the JVM that runs
                    the integration.
                  properties:
                    debug:
                      description: Activates remote debugging, so that a debugger
                        can be attached to the JVM, e.g., using port-forwarding
                      type: boolean
                    debugAddress:
                      description: Transport address at which to listen for the newly
                        launched JVM (default `*:5005`)
                      type: string
                    debugSuspend:
                      description: Suspends the target JVM immediately before the
                        main class is loaded
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    options:
                      description: A list of JVM options
                      items:
                        type: string
                      type: array
                    printCommand:
                      description: Prints the command used the start the JVM in the
                        container logs (default `true`)
                      type: boolean
                  type: object
                knative:
                  description: "The Knative trait automatically discovers addresses
                    of Knative resources and inject them into the running integration.
                    \n The full Knative configuration is injected in the CAMEL_KNATIVE_CONFIGURATION
                    in JSON format. The Camel Knative component will then use the
                    full configuration to configure the routes. \n The trait is enabled
                    by default when the Knative profile is active."
                  properties:
                    auto:
                      description: Enable automatic discovery of all trait properties.
                      type: boolean
                    camelSourceCompat:
                      description: Enables Knative CamelSource pre 0.15 compatibility
                        fixes (will be removed in future versions).
                      type: boolean
                    channelSinks:
                      description: List of channels used as destination of integration
                        routes. Can contain simple channel names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    channelSources:
                      description: List of channels used as source of integration
                        routes. Can contain simple channel names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    configuration:
                      description: Can be used to inject a Knative complete configuration
                        in JSON format.
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    endpointSinks:
                      description: List of endpoints used as destination of integration
                        routes. Can contain simple endpoint names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    endpointSources:
                      description: List of channels used as source of integration
                        routes.
                      items:
                        type: string
                      type: array
                    eventSinks:
                      description: List of event types that the integration will produce.
                        Can contain simple event types or full Camel URIs (to use
                        a specific broker).
                      items:
                        type: string
                      type: array
                    eventSources:
                      description: List of event types that the integration will be
                        subscribed to. Can contain simple event types or full Camel
                        URIs (to use a specific broker different from "default").
                      items:
                        type: string
                      type: array
                    filterSourceChannels:
                      description: Enables filtering on events based on the header
                        "ce-knativehistory". Since this is an experimental header
                        that can be removed in a future version of Knative, filtering
                        is enabled only when the integration is listening from more
                        than 1 channel.
                      type: boolean
                  type: object
                knativeService:
                  description: "The Knative Service trait allows to configure options
                    when running the integration as Knative service instead of a standard
                    Kubernetes Deployment. \n Running integrations as Knative Services
                    adds auto-scaling (and scaling-to-zero) features, but those features
                    are only meaningful when the routes use a HTTP endpoint consumer."
                  properties:
                    auto:
                      description: "Automatically deploy the integration as Knative
                        service when all conditions hold: \n * Integration is using
                        the Knative profile * All routes are either starting from
                        a HTTP based consumer or a passive consumer (e.g. `direct`
                        is a passive consumer)"
                      type: boolean
                    autoscalingMetric:
                      description: "Configures the Knative autoscaling metric property
                        (e.g. to set `concurrency` based or `cpu` based autoscaling).
                        \n Refer to the Knative documentation for more information."
                      type: string
                    autoscalingTarget:
                      description: "Sets the allowed concurrency level or CPU percentage
                        (depending on the autoscaling metric) for each Pod. \n Refer
                        to the Knative documentation for more information."
                      type: integer
                    class:
                      description: "Configures the Knative autoscaling class property
                        (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev`
                        autoscaling). \n Refer to the Knative documentation for more
                        information."
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    maxScale:
                      description: "An upper bound for the number of Pods that can
                        be running in parallel for the integration. Knative has its
                        own cap value that depends on the installation. \n Refer to
                        the Knative documentation for more information."
                      type: integer
                    minScale:
                      description: "The minimum number of Pods that should be running
                        at any time for the integration. It's **zero** by default,
                        meaning that the integration is scaled down to zero when not
                        used for a configured amount of time. \n Refer to the Knative
                        documentation for more information."
                      type: integer
                  type: object
                openAPI:
                  description: The OpenAPI DSL trait is internally used to allow creating
                    integrations from a OpenAPI specs.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                owner:
                  description: The Owner trait ensures that all created resources
                    belong to the integration being created and transfers annotations
                    and labels on the integration onto these owned resources.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    targetAnnotations:
                      description: The set of annotations to be transferred
                      items:
                        type: string
                      type: array
                    targetLabels:
                      description: The set of labels to be transferred
                      items:
                        type: string
                      type: array
                  type: object
                platform:
                  description: "The platform trait is a base trait that is used to
                    assign an integration platform to an integration. \n In case the
                    platform is missing, the trait is allowed to create a default
                    platform. This feature is especially useful in contexts where
                    there's no need to provide a custom configuration for the platform
                    (e.g. on OpenShift the default settings work, since there's an
                    embedded container image registry)."
                  properties:
                    auto:
                      description: To automatically detect from the environment if
                        a default platform can be created (it will be created on OpenShift
                        only).
                      type: boolean
                    createDefault:
                      description: To create a default (empty) platform when the platform
                        is missing.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                prometheus:
                  description: "The Prometheus trait configures a Prometheus-compatible
                    endpoint. It also exposes the integration with a `Service` and
                    a `ServiceMonitor` resources, so that the endpoint can be scraped
                    automatically, when using the Prometheus operator. \n The metrics
                    exposed vary depending on the configured runtime. With Quarkus,
                    the metrics are exposed using MicroProfile Metrics. While with
                    the default runtime, they are exposed using the Prometheus JMX
                    exporter. \n WARNING: The creation of the `ServiceMonitor` resource
                    requires the https://github.com/coreos/prometheus-operator[Prometheus
                    Operator] custom resource definition to be installed. You can
                    set `service-monitor` to `false` for the Prometheus trait to work
                    without the Prometheus operator. \n It's disabled by default."
                  properties:
                    configMap:
                      description: To use a custom ConfigMap containing the Prometheus
                        JMX exporter configuration (under the `content` ConfigMap
                        key). When this property is left empty (default), Camel K
                        generates a standard Prometheus configuration for the integration.
                        It is not applicable when using Quarkus.
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    port:
                      description: The Prometheus endpoint port (default `9779`, or
                        `8080` with Quarkus).
                      type: integer
                    serviceMonitor:
                      description: Whether a `ServiceMonitor` resource is created
                        (default `true`).
                      type: boolean
                    serviceMonitorLabels:
                      description: The `ServiceMonitor` resource labels, applicable
                        when `service-monitor` is `true`.
                      items:
                        type: string
                      type: array
                  type: object
                pullSecret:
                  description: "The Pull Secret trait sets a pull secret on the pod,
                    to allow Kubernetes to retrieve the container image from an external
                    registry. \n The pull secret can be specified manually or, in
                    case you've configured authentication for an external container
                    registry on the `IntegrationPlatform`, the same secret is used
                    to pull images. \n It's enabled by default whenever you configure
                    authentication for an external container registry, so it assumes
                    that external registries are private. \n If your registry does
                    not need authentication for pulling images, you can disable this
                    trait."
                  properties:
                    auto:
                      description: Automatically configures the platform registry
                        secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    secretName:
                      description: The pull secret name to set on the Pod. If left
                        empty this is automatically taken from the `IntegrationPlatform`
                        registry configuration.
                      type: string
                  type: object
                quarkus:
                  description: "The Quarkus trait activates the Quarkus runtime. \n
                    It's disabled by default."
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    native:
                      description: The Quarkus runtime type (reserved for future use)
                      type: boolean
                  type: object
                route:
                  description: The Route trait can be used to configure the creation
                    of OpenShift routes for the integration.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    host:
                      description: To configure the host exposed by the route.
                      type: string
                    tlsCACertificate:
                      description: "The TLS cert authority certificate contents. \n
                        Refer to the OpenShift documentation for additional information."
                      type: string
                    tlsCertificate:
                      description: "The TLS certificate contents. \n Refer to the
                        OpenShift documentation for additional information."
                      type: string
                    tlsDestinationCACertificate:
                      description: "The destination CA certificate provides the contents
                        of the ca certificate of the final destination.  When using
                        reencrypt termination this file should be provided in order
                        to have routers use it for health checks on the secure connection.
                        If this field is not specified, the router may provide its
                        own destination CA and perform hostname validation using the
                        short service name (service.namespace.svc), which allows infrastructure
                        generated certificates to automatically verify. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsInsecureEdgeTerminationPolicy:
                      description: "To configure how to deal with insecure traffic,
                        e.g. `Allow`, `Disable` or `Redirect` traffic. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsKey:
                      description: "The TLS certificate key contents. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsTermination:
                      description: "The TLS termination type, like `edge`, `passthrough`
                        or `reencrypt`. \n Refer to the OpenShift documentation for
                        additional information."
                      type: string
                  type: object
                service:
                  description: "The Service trait exposes the integration with a Service
                    resource so that it can be accessed by other applications (or
                    integrations) in the same namespace. \n It's enabled by default
                    if the integration depends on a Camel component that can expose
                    a HTTP endpoint."
                  properties:
                    auto:
                      description: To automatically detect from the code if a Service
                        needs to be created.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    nodePort:
                      description: Enable Service to be exposed as NodePort
                      type: boolean
                  type: object
              type: object
          type: object
        status:
          description: IntegrationPlatformStatus defines the observed state of IntegrationPlatform
          properties:
            build:
              description: IntegrationPlatformBuildSpec contains platform related
                build information
              properties:
                baseImage:
                  type: string
                buildStrategy:
                  description: IntegrationPlatformBuildStrategy enumerates all implemented
                    build strategies
                  type: string
                httpProxySecret:
                  type: string
                kanikoBuildCache:
                  type: boolean
                maven:
                  description: MavenSpec --
                  properties:
                    localRepository:
                      type: string
                    settings:
                      description: ValueSource --
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key
                                must be defined
                              type: boolean
                          required:
                            - key
                          type: object
                        secretKeyRef:
                          description: Selects a key of a secret.
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                            - key
                          type: object
                      type: object
                    timeout:
                      type: string
                  type: object
                persistentVolumeClaim:
                  type: string
                properties:
                  additionalProperties:
                    type: string
                  type: object
                publishStrategy:
                  description: IntegrationPlatformBuildPublishStrategy enumerates
                    all implemented publish strategies
                  type: string
                registry:
                  description: IntegrationPlatformRegistrySpec --
                  properties:
                    address:
                      type: string
                    ca:
                      type: string
                    insecure:
                      type: boolean
                    organization:
                      type: string
                    secret:
                      type: string
                  type: object
                runtimeProvider:
                  description: RuntimeProvider --
                  type: string
                runtimeVersion:
                  type: string
                timeout:
                  type: string
              type: object
            cluster:
              description: IntegrationPlatformCluster is the kind of orchestration
                cluster the platform is installed into
              type: string
            conditions:
              items:
                description: IntegrationPlatformCondition describes the state of a
                  resource at a certain point.
                properties:
                  lastTransitionTime:
                    description: Last time the condition transitioned from one status
                      to another.
                    format: date-time
                    type: string
                  lastUpdateTime:
                    description: The last time this condition was updated.
                    format: date-time
                    type: string
                  message:
                    description: A human readable message indicating details about
                      the transition.
                    type: string
                  reason:
                    description: The reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of integration condition.
                    type: string
                required:
                  - status
                  - type
                type: object
              type: array
            configuration:
              items:
                description: ConfigurationSpec --
                properties:
                  type:
                    type: string
                  value:
                    type: string
                required:
                  - type
                  - value
                type: object
              type: array
            phase:
              description: IntegrationPlatformPhase --
              type: string
            profile:
              description: TraitProfile represents lists of traits that are enabled
                for the specific installation/integration
              type: string
            resources:
              description: IntegrationPlatformResourcesSpec contains platform related
                resources
              properties:
                kits:
                  items:
                    type: string
                  type: array
              type: object
            traits:
              description: Traits --
              properties:
                affinity:
                  description: "Allows constraining which nodes the integration pod(s)
                    are eligible to be scheduled on, based on labels on the node,
                    or with inter-pod affinity and anti-affinity, based on labels
                    on pods that are already running on the nodes. \n Itâ€™s disabled
                    by default."
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    nodeAffinityLabels:
                      description: Defines a set of nodes the integration pod(s) are
                        eligible to be scheduled on, based on labels on the node.
                      items:
                        type: string
                      type: array
                    podAffinity:
                      description: Always co-locates multiple replicas of the integration
                        in the same node (default *false*).
                      type: boolean
                    podAffinityLabels:
                      description: Defines a set of pods (namely those matching the
                        label selector, relative to the given namespace) that the
                        integration pod(s) should be co-located with.
                      items:
                        type: string
                      type: array
                    podAntiAffinity:
                      description: Never co-locates multiple replicas of the integration
                        in the same node (default *false*).
                      type: boolean
                    podAntiAffinityLabels:
                      description: Defines a set of pods (namely those matching the
                        label selector, relative to the given namespace) that the
                        integration pod(s) should not be co-located with.
                      items:
                        type: string
                      type: array
                  type: object
                builder:
                  description: The builder trait is internally used to determine the
                    best strategy to build and configure IntegrationKits.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    verbose:
                      description: Enable verbose logging on build components that
                        support it (e.g. Kaniko build pod).
                      type: boolean
                  type: object
                camel:
                  description: The Camel trait can be used to configure versions of
                    Apache Camel K runtime and related libraries, it cannot be disabled.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    runtimeVersion:
                      description: The camel-k-runtime version to use for the integration.
                        It overrides the default version set in the Integration Platform.
                      type: string
                  type: object
                container:
                  description: "The Container trait can be used to configure properties
                    of the container where the integration will run. \n It also provides
                    configuration for Services associated to the container."
                  properties:
                    auto:
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    expose:
                      description: Can be used to enable/disable exposure via kubernetes
                        Service.
                      type: boolean
                    limitCPU:
                      description: The maximum amount of CPU required.
                      type: string
                    limitMemory:
                      description: The maximum amount of memory required.
                      type: string
                    livenessFailureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Applies to the liveness
                        probe.
                      format: int32
                      type: integer
                    livenessInitialDelay:
                      description: Number of seconds after the container has started
                        before liveness probes are initiated.
                      format: int32
                      type: integer
                    livenessPeriod:
                      description: How often to perform the probe. Applies to the
                        liveness probe.
                      format: int32
                      type: integer
                    livenessSuccessThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Applies to the
                        liveness probe.
                      format: int32
                      type: integer
                    livenessTimeout:
                      description: Number of seconds after which the probe times out.
                        Applies to the liveness probe.
                      format: int32
                      type: integer
                    name:
                      description: The main container name. It's named `integration`
                        by default.
                      type: string
                    port:
                      description: To configure a different port exposed by the container
                        (default `8080`).
                      type: integer
                    portName:
                      description: To configure a different port name for the port
                        exposed by the container (default `http`).
                      type: string
                    probePath:
                      description: Path to access on the probe ( default `/health`).
                        Note that this property is not supported on quarkus runtime
                        and setting it will result in the integration failing to start.
                      type: string
                    probesEnabled:
                      description: ProbesEnabled enable/disable probes on the container
                        (default `false`)
                      type: boolean
                    readinessFailureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Applies to the readiness
                        probe.
                      format: int32
                      type: integer
                    readinessInitialDelay:
                      description: Number of seconds after the container has started
                        before readiness probes are initiated.
                      format: int32
                      type: integer
                    readinessPeriod:
                      description: How often to perform the probe. Applies to the
                        readiness probe.
                      format: int32
                      type: integer
                    readinessSuccessThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Applies to the
                        readiness probe.
                      format: int32
                      type: integer
                    readinessTimeout:
                      description: Number of seconds after which the probe times out.
                        Applies to the readiness probe.
                      format: int32
                      type: integer
                    requestCPU:
                      description: The minimum amount of CPU required.
                      type: string
                    requestMemory:
                      description: The minimum amount of memory required.
                      type: string
                    servicePort:
                      description: To configure under which service port the container
                        port is to be exposed (default `80`).
                      type: integer
                    servicePortName:
                      description: To configure under which service port name the
                        container port is to be exposed (default `http`).
                      type: string
                  type: object
                cron:
                  description: "The Cron trait can be used to customize the behaviour
                    of periodic timer/cron based integrations. \n While normally an
                    integration requires a pod to be always up and running, some periodic
                    tasks, such as batch jobs, require to be activated at specific
                    hours of the day or with a periodic delay of minutes. For such
                    tasks, the cron trait can materialize the integration as a Kubernetes
                    CronJob instead of a standard deployment, in order to save resources
                    when the integration does not need to be executed. \n Integrations
                    that start from the following components are evaluated by the
                    cron trait: `timer`, `cron`, `quartz`. \n The rules for using
                    a Kubernetes CronJob are the following: - `timer`: when periods
                    can be written as cron expressions. E.g. `timer:tick?period=60000`.
                    - `cron`, `quartz`: when the cron expression does not contain
                    seconds (or the \"seconds\" part is set to 0). E.g.   `cron:tab?schedule=0/2${plus}*{plus}*{plus}*{plus}?`
                    or `quartz:trigger?cron=0{plus}0/2{plus}*{plus}*{plus}*{plus}?`."
                  properties:
                    auto:
                      description: "Automatically deploy the integration as CronJob
                        when all routes are either starting from a periodic consumer
                        (only `cron`, `timer` and `quartz` are supported) or a passive
                        consumer (e.g. `direct` is a passive consumer). \n It's required
                        that all periodic consumers have the same period and it can
                        be expressed as cron schedule (e.g. `1m` can be expressed
                        as `0/1 * * * *`, while `35m` or `50s` cannot)."
                      type: boolean
                    components:
                      description: "A comma separated list of the Camel components
                        that need to be customized in order for them to work when
                        the schedule is triggered externally by Kubernetes. A specific
                        customizer is activated for each specified component. E.g.
                        for the `timer` component, the `cron-timer` customizer is
                        activated (it's present in the `org.apache.camel.k:camel-k-runtime-cron`
                        library). \n Supported components are currently: `cron`, `timer`
                        and `quartz`."
                      type: string
                    concurrencyPolicy:
                      description: 'Specifies how to treat concurrent executions of
                        a Job. Valid values are: - "Allow": allows CronJobs to run
                        concurrently; - "Forbid" (default): forbids concurrent runs,
                        skipping next run if previous run hasn''t finished yet; -
                        "Replace": cancels currently running job and replaces it with
                        a new one'
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    fallback:
                      description: Use the default Camel implementation of the `cron`
                        endpoint (`quartz`) instead of trying to materialize the integration
                        as Kubernetes CronJob.
                      type: boolean
                    schedule:
                      description: The CronJob schedule for the whole integration.
                        If multiple routes are declared, they must have the same schedule
                        for this mechanism to work correctly.
                      type: string
                  type: object
                dependencies:
                  description: The Dependencies trait is internally used to automatically
                    add runtime dependencies based on the integration that the user
                    wants to run.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                deployer:
                  description: The deployer trait can be used to explicitly select
                    the kind of high level resource that will deploy the integration.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    kind:
                      description: Allows to explicitly select the desired deployment
                        kind between `deployment`, `cron-job` or `knative-service`
                        when creating the resources for running the integration.
                      type: string
                  type: object
                deployment:
                  description: The Deployment trait is responsible for generating
                    the Kubernetes deployment that will make sure the integration
                    will run in the cluster.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                environment:
                  description: The environment trait is used internally to inject
                    standard environment variables in the integration container, such
                    as `NAMESPACE`, `POD_NAME` and others.
                  properties:
                    containerMeta:
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                gc:
                  description: The GC Trait garbage-collects all resources that are
                    no longer necessary upon integration updates.
                  properties:
                    discoveryCache:
                      description: Discovery client cache to be used, either `disabled`,
                        `disk` or `memory` (default `memory`)
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                ingress:
                  description: "The Ingress trait can be used to expose the service
                    associated with the integration to the outside world with a Kubernetes
                    Ingress. \n It's enabled by default whenever a Service is added
                    to the integration (through the `service` trait)."
                  properties:
                    auto:
                      description: To automatically add an ingress whenever the integration
                        uses a HTTP endpoint consumer.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    host:
                      description: '**Required**. To configure the host exposed by
                        the ingress.'
                      type: string
                  type: object
                istio:
                  description: The Istio trait allows to configure properties related
                    to the Istio service mesh, such as sidecar injection and outbound
                    IP ranges.
                  properties:
                    allow:
                      description: Configures a (comma-separated) list of CIDR subnets
                        that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16`
                        by default).
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    inject:
                      description: Forces the value for labels `sidecar.istio.io/inject`.
                        By default the label is set to `true` on deployment and not
                        set on Knative Service.
                      type: boolean
                  type: object
                jolokia:
                  description: "The Jolokia trait activates and configures the Jolokia
                    Java agent. \n See https://jolokia.org/reference/html/agents.html"
                  properties:
                    CACert:
                      description: The PEM encoded CA certification file path, used
                        to verify client certificates, applicable when `protocol`
                        is `https` and `use-ssl-client-authentication` is `true` (default
                        `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt`
                        for OpenShift).
                      type: string
                    clientPrincipal:
                      description: The principal(s) which must be given in a client
                        certificate to allow access to the Jolokia endpoint, applicable
                        when `protocol` is `https` and `use-ssl-client-authentication`
                        is `true` (default `clientPrincipal=cn=system:master-proxy`,
                        `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc`
                        for OpenShift).
                      items:
                        type: string
                      type: array
                    discoveryEnabled:
                      description: Listen for multicast requests (default `false`)
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    extendedClientCheck:
                      description: Mandate the client certificate contains a client
                        flag in the extended key usage section, applicable when `protocol`
                        is `https` and `use-ssl-client-authentication` is `true` (default
                        `true` for OpenShift).
                      type: boolean
                    host:
                      description: The Host address to which the Jolokia agent should
                        bind to. If `"\*"` or `"0.0.0.0"` is given, the servers binds
                        to every network interface (default `"*"`).
                      type: string
                    options:
                      description: A list of additional Jolokia options as defined
                        in https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM
                        agent configuration options]
                      items:
                        type: string
                      type: array
                    password:
                      description: The password used for authentication, applicable
                        when the `user` option is set.
                      type: string
                    port:
                      description: The Jolokia endpoint port (default `8778`).
                      type: integer
                    protocol:
                      description: The protocol to use, either `http` or `https` (default
                        `https` for OpenShift)
                      type: string
                    useSSLClientAuthentication:
                      description: Whether client certificates should be used for
                        authentication (default `true` for OpenShift).
                      type: boolean
                    user:
                      description: The user to be used for authentication
                      type: string
                  type: object
                jvm:
                  description: The JVM trait is used to configure the JVM that runs
                    the integration.
                  properties:
                    debug:
                      description: Activates remote debugging, so that a debugger
                        can be attached to the JVM, e.g., using port-forwarding
                      type: boolean
                    debugAddress:
                      description: Transport address at which to listen for the newly
                        launched JVM (default `*:5005`)
                      type: string
                    debugSuspend:
                      description: Suspends the target JVM immediately before the
                        main class is loaded
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    options:
                      description: A list of JVM options
                      items:
                        type: string
                      type: array
                    printCommand:
                      description: Prints the command used the start the JVM in the
                        container logs (default `true`)
                      type: boolean
                  type: object
                knative:
                  description: "The Knative trait automatically discovers addresses
                    of Knative resources and inject them into the running integration.
                    \n The full Knative configuration is injected in the CAMEL_KNATIVE_CONFIGURATION
                    in JSON format. The Camel Knative component will then use the
                    full configuration to configure the routes. \n The trait is enabled
                    by default when the Knative profile is active."
                  properties:
                    auto:
                      description: Enable automatic discovery of all trait properties.
                      type: boolean
                    camelSourceCompat:
                      description: Enables Knative CamelSource pre 0.15 compatibility
                        fixes (will be removed in future versions).
                      type: boolean
                    channelSinks:
                      description: List of channels used as destination of integration
                        routes. Can contain simple channel names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    channelSources:
                      description: List of channels used as source of integration
                        routes. Can contain simple channel names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    configuration:
                      description: Can be used to inject a Knative complete configuration
                        in JSON format.
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    endpointSinks:
                      description: List of endpoints used as destination of integration
                        routes. Can contain simple endpoint names or full Camel URIs.
                      items:
                        type: string
                      type: array
                    endpointSources:
                      description: List of channels used as source of integration
                        routes.
                      items:
                        type: string
                      type: array
                    eventSinks:
                      description: List of event types that the integration will produce.
                        Can contain simple event types or full Camel URIs (to use
                        a specific broker).
                      items:
                        type: string
                      type: array
                    eventSources:
                      description: List of event types that the integration will be
                        subscribed to. Can contain simple event types or full Camel
                        URIs (to use a specific broker different from "default").
                      items:
                        type: string
                      type: array
                    filterSourceChannels:
                      description: Enables filtering on events based on the header
                        "ce-knativehistory". Since this is an experimental header
                        that can be removed in a future version of Knative, filtering
                        is enabled only when the integration is listening from more
                        than 1 channel.
                      type: boolean
                  type: object
                knativeService:
                  description: "The Knative Service trait allows to configure options
                    when running the integration as Knative service instead of a standard
                    Kubernetes Deployment. \n Running integrations as Knative Services
                    adds auto-scaling (and scaling-to-zero) features, but those features
                    are only meaningful when the routes use a HTTP endpoint consumer."
                  properties:
                    auto:
                      description: "Automatically deploy the integration as Knative
                        service when all conditions hold: \n * Integration is using
                        the Knative profile * All routes are either starting from
                        a HTTP based consumer or a passive consumer (e.g. `direct`
                        is a passive consumer)"
                      type: boolean
                    autoscalingMetric:
                      description: "Configures the Knative autoscaling metric property
                        (e.g. to set `concurrency` based or `cpu` based autoscaling).
                        \n Refer to the Knative documentation for more information."
                      type: string
                    autoscalingTarget:
                      description: "Sets the allowed concurrency level or CPU percentage
                        (depending on the autoscaling metric) for each Pod. \n Refer
                        to the Knative documentation for more information."
                      type: integer
                    class:
                      description: "Configures the Knative autoscaling class property
                        (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev`
                        autoscaling). \n Refer to the Knative documentation for more
                        information."
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    maxScale:
                      description: "An upper bound for the number of Pods that can
                        be running in parallel for the integration. Knative has its
                        own cap value that depends on the installation. \n Refer to
                        the Knative documentation for more information."
                      type: integer
                    minScale:
                      description: "The minimum number of Pods that should be running
                        at any time for the integration. It's **zero** by default,
                        meaning that the integration is scaled down to zero when not
                        used for a configured amount of time. \n Refer to the Knative
                        documentation for more information."
                      type: integer
                  type: object
                openAPI:
                  description: The OpenAPI DSL trait is internally used to allow creating
                    integrations from a OpenAPI specs.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                owner:
                  description: The Owner trait ensures that all created resources
                    belong to the integration being created and transfers annotations
                    and labels on the integration onto these owned resources.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    targetAnnotations:
                      description: The set of annotations to be transferred
                      items:
                        type: string
                      type: array
                    targetLabels:
                      description: The set of labels to be transferred
                      items:
                        type: string
                      type: array
                  type: object
                platform:
                  description: "The platform trait is a base trait that is used to
                    assign an integration platform to an integration. \n In case the
                    platform is missing, the trait is allowed to create a default
                    platform. This feature is especially useful in contexts where
                    there's no need to provide a custom configuration for the platform
                    (e.g. on OpenShift the default settings work, since there's an
                    embedded container image registry)."
                  properties:
                    auto:
                      description: To automatically detect from the environment if
                        a default platform can be created (it will be created on OpenShift
                        only).
                      type: boolean
                    createDefault:
                      description: To create a default (empty) platform when the platform
                        is missing.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                  type: object
                prometheus:
                  description: "The Prometheus trait configures a Prometheus-compatible
                    endpoint. It also exposes the integration with a `Service` and
                    a `ServiceMonitor` resources, so that the endpoint can be scraped
                    automatically, when using the Prometheus operator. \n The metrics
                    exposed vary depending on the configured runtime. With Quarkus,
                    the metrics are exposed using MicroProfile Metrics. While with
                    the default runtime, they are exposed using the Prometheus JMX
                    exporter. \n WARNING: The creation of the `ServiceMonitor` resource
                    requires the https://github.com/coreos/prometheus-operator[Prometheus
                    Operator] custom resource definition to be installed. You can
                    set `service-monitor` to `false` for the Prometheus trait to work
                    without the Prometheus operator. \n It's disabled by default."
                  properties:
                    configMap:
                      description: To use a custom ConfigMap containing the Prometheus
                        JMX exporter configuration (under the `content` ConfigMap
                        key). When this property is left empty (default), Camel K
                        generates a standard Prometheus configuration for the integration.
                        It is not applicable when using Quarkus.
                      type: string
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    port:
                      description: The Prometheus endpoint port (default `9779`, or
                        `8080` with Quarkus).
                      type: integer
                    serviceMonitor:
                      description: Whether a `ServiceMonitor` resource is created
                        (default `true`).
                      type: boolean
                    serviceMonitorLabels:
                      description: The `ServiceMonitor` resource labels, applicable
                        when `service-monitor` is `true`.
                      items:
                        type: string
                      type: array
                  type: object
                pullSecret:
                  description: "The Pull Secret trait sets a pull secret on the pod,
                    to allow Kubernetes to retrieve the container image from an external
                    registry. \n The pull secret can be specified manually or, in
                    case you've configured authentication for an external container
                    registry on the `IntegrationPlatform`, the same secret is used
                    to pull images. \n It's enabled by default whenever you configure
                    authentication for an external container registry, so it assumes
                    that external registries are private. \n If your registry does
                    not need authentication for pulling images, you can disable this
                    trait."
                  properties:
                    auto:
                      description: Automatically configures the platform registry
                        secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    secretName:
                      description: The pull secret name to set on the Pod. If left
                        empty this is automatically taken from the `IntegrationPlatform`
                        registry configuration.
                      type: string
                  type: object
                quarkus:
                  description: "The Quarkus trait activates the Quarkus runtime. \n
                    It's disabled by default."
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    native:
                      description: The Quarkus runtime type (reserved for future use)
                      type: boolean
                  type: object
                route:
                  description: The Route trait can be used to configure the creation
                    of OpenShift routes for the integration.
                  properties:
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    host:
                      description: To configure the host exposed by the route.
                      type: string
                    tlsCACertificate:
                      description: "The TLS cert authority certificate contents. \n
                        Refer to the OpenShift documentation for additional information."
                      type: string
                    tlsCertificate:
                      description: "The TLS certificate contents. \n Refer to the
                        OpenShift documentation for additional information."
                      type: string
                    tlsDestinationCACertificate:
                      description: "The destination CA certificate provides the contents
                        of the ca certificate of the final destination.  When using
                        reencrypt termination this file should be provided in order
                        to have routers use it for health checks on the secure connection.
                        If this field is not specified, the router may provide its
                        own destination CA and perform hostname validation using the
                        short service name (service.namespace.svc), which allows infrastructure
                        generated certificates to automatically verify. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsInsecureEdgeTerminationPolicy:
                      description: "To configure how to deal with insecure traffic,
                        e.g. `Allow`, `Disable` or `Redirect` traffic. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsKey:
                      description: "The TLS certificate key contents. \n Refer to
                        the OpenShift documentation for additional information."
                      type: string
                    tlsTermination:
                      description: "The TLS termination type, like `edge`, `passthrough`
                        or `reencrypt`. \n Refer to the OpenShift documentation for
                        additional information."
                      type: string
                  type: object
                service:
                  description: "The Service trait exposes the integration with a Service
                    resource so that it can be accessed by other applications (or
                    integrations) in the same namespace. \n It's enabled by default
                    if the integration depends on a Camel component that can expose
                    a HTTP endpoint."
                  properties:
                    auto:
                      description: To automatically detect from the code if a Service
                        needs to be created.
                      type: boolean
                    enabled:
                      description: Can be used to enable or disable a trait. All traits
                        share this common property.
                      type: boolean
                    nodePort:
                      description: Enable Service to be exposed as NodePort
                      type: boolean
                  type: object
              type: object
            version:
              type: string
          type: object
      type: object
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
