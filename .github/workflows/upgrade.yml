# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: upgrade

on:
  pull_request:
    branches:
      - main
      - "release-*"
    paths-ignore:
      - 'docs/**'
      - 'proposals/**'
      - '**.adoc'
      - '**.md'
      - 'KEYS'
      - 'LICENSE'
      - 'NOTICE'
  push:
    branches:
      - main
      - "release-*"
    paths-ignore:
      - 'docs/**'
      - 'proposals/**'
      - '**.adoc'
      - '**.md'
      - 'KEYS'
      - 'LICENSE'
      - 'NOTICE'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  upgrade:

    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        submodules: recursive

    - id: prepare-env
      name: Prepare Test Environment
      uses: ./.github/actions/kamel-prepare-env

    - id: configure-platform
      name: Configure Platform
      uses: ./.github/actions/kamel-config-cluster
      with:
        cluster-type: ${{ steps.prepare-env.outputs.cluster-platform }}
        opm: true
        olm: true

    - name: Get Released Kamel CLI
      shell: bash
      run: |
        export KAMEL_VERSION=$(make get-last-released-version)
        curl -L https://github.com/apache/camel-k/releases/download/v${KAMEL_VERSION}/camel-k-client-${KAMEL_VERSION}-linux-64bit.tar.gz -o kamel.tar.gz
        tar -zxf kamel.tar.gz
        sudo mv kamel /usr/local/bin/
        echo "Kamel version installed: $(kamel version)"

    - id: build-kamel-binary
      name: Build Kamel Binary
      uses: ./.github/actions/kamel-build
      with:
        image-registry: ${{ steps.configure-platform.outputs.image-registry }}
        # Avoid overwriting last-released version of binary
        install-kamel-binary: false

    - id: build-kamel-bundle
      name: Build Kamel Metadata Bundle
      uses: ./.github/actions/kamel-build-bundle
      with:
        image-registry: ${{ steps.configure-platform.outputs.image-registry }}
        local-image-name: ${{ steps.build-kamel-binary.outputs.local-image-name }}
        local-image-version: ${{ steps.build-kamel-binary.outputs.local-image-version }}

    - name: Run IT
      run: |
        # Use the last released Kamel CLI
        export RELEASED_KAMEL_BIN=/usr/local/bin/kamel

        echo "Kamel version: $(${RELEASED_KAMEL_BIN} version)"

        # Configure install options
        export CUSTOM_IMAGE=${{ steps.build-kamel-binary.outputs.local-image-name }}
        export CUSTOM_VERSION=${{ steps.build-kamel-binary.outputs.local-image-version }}
        export KAMEL_INSTALL_BUILD_PUBLISH_STRATEGY=Spectrum
        export KAMEL_INSTALL_MAVEN_REPOSITORIES=$(make get-staging-repo)
        export KAMEL_INSTALL_REGISTRY=${{ steps.configure-platform.outputs.image-registry }}
        export KAMEL_INSTALL_REGISTRY_INSECURE=${{ steps.configure-platform.outputs.image-registry-insecure }}

        # Configure test options
        export CAMEL_K_PREV_IIB=quay.io/operatorhubio/catalog:latest
        export CAMEL_K_NEW_IIB=${{ steps.build-kamel-bundle.outputs.local-image-bundle-index }}
        export KAMEL_K_TEST_RELEASE_VERSION=$(make get-last-released-version)
        export KAMEL_K_TEST_OPERATOR_CURRENT_IMAGE=${CUSTOM_IMAGE}:${CUSTOM_VERSION}
        export CAMEL_K_PREV_UPGRADE_CHANNEL=${{ env.PREV_XY_CHANNEL }}
        export CAMEL_K_NEW_UPGRADE_CHANNEL=${{ env.NEW_XY_CHANNEL }}

        # Then run integration tests
        make test-upgrade
