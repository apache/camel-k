# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: kamel-config-cluster-custom
description: 'Provides configuration for acessing a custom kubernetes cluster'

runs:
  using: "composite"
  steps:
    - name: Read platform-config variable to temporary file & override PLATFORM_TYPE if platform config defined
      shell: bash
      run: |
        export PLATFORM_CONFIG=/tmp/platform-config.json

        touch "${PLATFORM_CONFIG}"
        if [ -z "${{ env.PLATFORM_CONFIG_DATA }}" ]; then
          echo "Error: No PLATFORM_CONFIG_DATA has been defined"
          exit 1
        fi

        cat << EOF > "${PLATFORM_CONFIG}"
        ${{ env.PLATFORM_CONFIG_DATA }}
        EOF

        if [ ! -f "${PLATFORM_CONFIG}" ]; then
          echo "Error: No file ${PLATFORM_CONFIG} has been created"
          exit 1
        fi

        if [ -s "${PLATFORM_CONFIG}" ]; then
          echo "Info: Platform configuration defined"
          echo "PLATFORM_CONFIG=${PLATFORM_CONFIG}" >> $GITHUB_ENV
        else
          echo "Error: No platform configuration defined"
          exit 1
        fi

    - name: Platform-config JSON to variables
      uses: antifree/json-to-variables@v1.0.1
      with:
        filename: ${{ env.PLATFORM_CONFIG }}
        prefix: 'e2e'

    - id: connect-cluster
      name: Connect to cluster
      shell: bash
      run: |
        if [ -z "${{ env.e2e_kube-config-data }}" ]; then
          echo "Error: kube config data property cannot be found"
          exit 1
        fi

        if [ -z "${{ env.e2e_kube-admin-user-ctx }}" ]; then
          echo "Error: kube admin context property cannot be found"
          exit 1
        fi

        if [ -z "${{ env.e2e_kube-user-ctx }}" ]; then
          echo "Error: kube user context property cannot be found"
          exit 1
        fi

        if [ -z "${{ env.e2e_image-registry-pull-host }}" ]; then
          echo "Error: image registry pull host property cannot be found"
          exit 1
        fi

        if [ -z "${{ env.e2e_image-registry-push-host }}" ]; then
          echo "Error: image registry build host property cannot be found"
          exit 1
        fi

        if [ -n "${{ env.e2e_image-registry-user }}" ] && [ -n "${{ env.e2e_image-registry-token }}" ]; then
          echo "Secured registry in use so login with docker"
          docker login \
            -u "${{ env.e2e_image-registry-user }}" \
            -p "${{ env.e2e_image-registry-token }}" \
            "${{ env.e2e_image-registry-push-host }}"
        fi

        # Copy the kube config to the correct location for kubectl
        mkdir -p $HOME/.kube
        echo -n "${{ env.e2e_kube-config-data }}" | base64 -d > ${HOME}/.kube/config
        if [ ! -f ${HOME}/.kube/config ]; then
          echo "Error: kube config file not created correctly"
          exit 1
        fi

        set -e
        kubectl config use-context "${{ env.e2e_kube-admin-user-ctx }}"
        if [ $? != 0 ]; then
          echo "Error: Failed to select kube admin context. Is the config and context correct?"
          exit 1
        fi
        set +e

    - id: info
      name: Info
      shell: bash
      run: |
        kubectl describe nodes

    - id: configure-developer-user
      name: Configure Developer User
      shell: bash
      run: |
        # Aggregate pod eviction permission to the default admin role
        cat <<EOF | oc apply -f -
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: camel-k-test:eviction
          labels:
            rbac.authorization.k8s.io/aggregate-to-admin: "true"
        rules:
        - apiGroups: [""]
          resources: ["pods/eviction"]
          verbs: ["create"]
        EOF

        # Grant nodes permission to the default developer user
        cat <<EOF | oc apply -f -
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: camel-k-test:nodes
        rules:
        - apiGroups: [""]
          resources: ["nodes"]
          verbs: ["get","list"]
        EOF
        cat <<EOF | oc apply -f -
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: camel-k-test:nodes
        subjects:
        - kind: User
          name: developer
        roleRef:
          kind: ClusterRole
          name: camel-k-test:nodes
          apiGroup: rbac.authorization.k8s.io
        EOF

        # Aggregate finalizers permission to the default admin role
        cat <<EOF | oc apply -f -
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: camel-k-test:finalizers
          labels:
            rbac.authorization.k8s.io/aggregate-to-admin: "true"
        rules:
        - apiGroups: ["camel.apache.org"]
          resources: ["*/finalizers"]
          verbs: ["update"]
        EOF

        # Set the context to the user
        kubectl config use-context "${{ env.e2e_kube-user-ctx }}"

    - id: extract-config
      shell: bash
      run: |
        echo "IMAGE_REGISTRY_PUSH_HOST=${{ env.e2e_image-registry-push-host }}" >> $GITHUB_ENV
        echo "IMAGE_REGISTRY_PULL_HOST=${{ env.e2e_image-registry-pull-host }}" >> $GITHUB_ENV
        echo "IMAGE_REGISTRY_INSECURE=${{ env.e2e_image-registry-insecure }}" >> $GITHUB_ENV

        #
        # Export the image namespace if defined in the platform config
        #
        if [ -n "${{ env.e2e_image-namespace }}" ]; then
          echo "IMAGE_NAMESPACE=${{ env.e2e_image-namespace }}" >> $GITHUB_ENV
        fi

        #
        # Export the context used for admin and user
        #
        echo "KUBE_ADMIN_USER_CTX=${{ env.e2e_kube-admin-user-ctx }}" >> $GITHUB_ENV
        echo "KUBE_USER_CTX=${{ env.e2e_kube-user-ctx }}" >> $GITHUB_ENV

        #
        # Export the flag for installing olm
        #
        echo "INSTALL_OLM=${{ env.e2e_install-olm }}" >> $GITHUB_ENV

        #
        # Clear out environment variables no longer required
        #
        echo "PLATFORM_CONFIG=" >> $GITHUB_ENV
        echo "e2e_image-registry-push-host=" >> $GITHUB_ENV
        echo "e2e_image-registry-pull-host=" >> $GITHUB_ENV
        echo "e2e_image-namespace=" >> $GITHUB_ENV
        echo "e2e_image-registry-user=" >> $GITHUB_ENV
        echo "e2e_image-registry-token=" >> $GITHUB_ENV
        echo "e2e_image-registry-insecure=" >> $GITHUB_ENV
        echo "e2e_kube-admin-user-ctx=" >> $GITHUB_ENV
        echo "e2e_kube-config-data=" >> $GITHUB_ENV
        echo "e2e_kube-user-ctx=" >> $GITHUB_ENV
        echo "e2e_install-olm=" >> $GITHUB_ENV
