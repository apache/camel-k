# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: kamel-config-cluster
description: 'Delegates to respective cluster action depending on type of requested cluster'

inputs:
  cluster-type:
    description: 'The type of cluster required: [kind, custom] - optional (see Override Cluster Type step)'
    required: false
  cluster-config-data:
    description: 'Variables for the cluster configuration - required for custom cluster type only optional (see Override Cluster Type step)'
    required: false
  cluster-kube-config-data:
    description: 'Base16 encoded kube config - required for custom cluster type only'
    required: false
  require-olm:
    description: 'If OLM is not available by default ensure that it is installed'
    default: false

runs:
  using: "composite"
  steps:
    - name: Override cluster type if there is a custom cluster-config
      shell: bash
      run: |
        if [ -n "${{ inputs.cluster-config-data }}" ]; then
          #
          # Have custom cluster-config-data so override cluster-type
          #
          echo "Have cluster-config-data so setting cluster-type to custom"
          calculated_cluster_type=custom
        elif [ -n "${{ inputs.cluster-type }}" ]; then
          echo "Cluster-type specified so setting accordingly"
          calculated_cluster_type=${{ inputs.cluster-type }}
        else
          echo "Info: No cluster configuration supplied. Default to kind."
          calculated_cluster_type=kind
        fi

        echo "CLUSTER_TYPE -> ${calculated_cluster_type}"
        echo "CLUSTER_TYPE=${calculated_cluster_type}" >> $GITHUB_ENV

    - id: execute-kind
      name: Maybe Execute Kind Cluster
      uses: ./.github/actions/kamel-config-cluster-kind
      if: ${{ env.CLUSTER_TYPE == 'kind' }}

    - id: execute-custom
      name: Maybe Execute Custom Cluster
      uses: ./.github/actions/kamel-config-cluster-custom
      if: ${{ env.CLUSTER_TYPE == 'custom' }}
      with:
        cluster-config-data: ${{ inputs.cluster-config-data }}
        cluster-kube-config-data: ${{ inputs.cluster-kube-config-data }}

    - id: execute-invalid
      name: Execute Invalid Cluster
      if: ${{ env.CLUSTER_TYPE != 'kind' &&  env.CLUSTER_TYPE != 'custom' }}
      shell: bash
      run: |
        echo "Error: Unrecognised cluster request for type of cluster. Should be kind or custom."
        exit 1

    - id: cluster-config
      name: Extract the config from the cluster
      shell: bash
      run: |
        case ${{ env.CLUSTER_TYPE }} in
        kind)
          # Does not require cluster-catalog-source-namespace
          # Does not require global operator name or namespace ... yet
          ./.github/actions/kamel-config-cluster/output-config.sh \
            -a "${{ steps.execute-kind.outputs.cluster-kube-admin-user-ctx }}" \
            -n "${{ steps.execute-kind.outputs.cluster-image-namespace }}" \
            -o "${{ steps.execute-kind.outputs.cluster-has-olm }}" \
            -p "${{ steps.execute-kind.outputs.cluster-image-registry-push-host }}" \
            -q "${{ steps.execute-kind.outputs.cluster-image-registry-pull-host }}" \
            -s "${{ steps.execute-kind.outputs.cluster-image-registry-insecure }}" \
            -u "${{ steps.execute-kind.outputs.cluster-kube-user-ctx }}"
            ;;
        custom)
          ./.github/actions/kamel-config-cluster/output-config.sh \
            -a "${{ steps.execute-custom.outputs.cluster-kube-admin-user-ctx }}" \
            -b "${{ steps.execute-custom.outputs.cluster-catalog-source-name }}" \
            -c "${{ steps.execute-custom.outputs.cluster-catalog-source-namespace }}" \
            -g "${{ steps.execute-custom.outputs.cluster-global-operator-namespace }}" \
            -n "${{ steps.execute-custom.outputs.cluster-image-namespace }}" \
            -o "${{ steps.execute-custom.outputs.cluster-has-olm }}" \
            -p "${{ steps.execute-custom.outputs.cluster-image-registry-push-host }}" \
            -q "${{ steps.execute-custom.outputs.cluster-image-registry-pull-host }}" \
            -s "${{ steps.execute-custom.outputs.cluster-image-registry-insecure }}" \
            -u "${{ steps.execute-custom.outputs.cluster-kube-user-ctx }}"
            ;;
        esac

      #
      # Install OLM if required
      #
    - id: install-olm
      name: Install OLM
      shell: bash
      run: |
        if [ "${{ steps.cluster-config.outputs.cluster-has-olm }}" == "true" ]; then
          # OLM already installed by default
          echo "OLM already available in cluster"
          echo "cluster-has-olm=${{ steps.cluster-config.outputs.cluster-has-olm }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [ "${{ inputs.require-olm }}" != "true" ]; then
          # OLM not explicitly requested
          echo "OLM not explicity required for testing"
          echo "cluster-has-olm=$(echo false)" >> $GITHUB_OUTPUT
          exit 0
        fi

        #
        # Get current context
        #
        echo "Cache current kube context"
        ctx=$(kubectl config current-context)

        #
        # Need to be admin so switch to the admin context
        #
        echo "Change to kube admin context"
        kubectl config use-context "${{ steps.cluster-config.outputs.cluster-kube-admin-user-ctx }}"

        set +e
        echo "Check if OLM is already installed"
        kubectl get deployments --all-namespaces | grep olm-operator
        if [ $? != 0 ]; then
          set -e
          echo "OLM not detected on cluster so downloading and installing"
          kubectl create -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.24.0/crds.yaml
          # wait for a while to be sure CRDs are installed
          sleep 1
          kubectl create -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.24.0/olm.yaml
        fi
        set -e

        #
        # Change back to original context
        #
        echo "Return to original kube context"
        kubectl config use-context "${ctx}"

        echo "cluster-has-olm=$(echo true)" >> $GITHUB_OUTPUT

        echo "Complete"

outputs:
  cluster-image-registry-push-host:
    description: "The image registry to which to push images"
    value: ${{ steps.cluster-config.outputs.cluster-image-registry-push-host }}
  cluster-image-registry-pull-host:
    description: "The image registry from which to pull images"
    value: ${{ steps.cluster-config.outputs.cluster-image-registry-pull-host }}
  cluster-image-registry-insecure:
    description: "Whether the pull registry is insecure"
    value: ${{ steps.cluster-config.outputs.cluster-image-registry-insecure }}
  cluster-catalog-source-name:
    description: "The name of the OLM catalog source to install"
    value: ${{ steps.cluster-config.outputs.cluster-catalog-source-name }}
  cluster-catalog-source-namespace:
    description: "The namespace in which to install the OLM catalog source"
    value: ${{ steps.cluster-config.outputs.cluster-catalog-source-namespace }}
  cluster-image-namespace:
    description: "The namespace to install the camel-k images"
    value: ${{ steps.cluster-config.outputs.cluster-image-namespace }}
  cluster-kube-admin-user-ctx:
    description: "The context of the kube admin user"
    value: ${{ steps.cluster-config.outputs.cluster-kube-admin-user-ctx }}
  cluster-kube-user-ctx:
    description: "The context of the kube user"
    value: ${{ steps.cluster-config.outputs.cluster-kube-user-ctx }}
  cluster-global-operator-namespace:
    description: "Namespace to install a global operator"
    value: ${{ steps.cluster-config.outputs.cluster-global-operator-namespace }}
  cluster-has-olm:
    description: "Does the cluster have OLM"
    value: ${{ steps.install-olm.outputs.cluster-has-olm }}
