# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: kamel-config-cluster
description: 'Delegates to respective cluster action depending on type of requested cluster'

inputs:
  cluster-type:
    description: 'The type of cluster required: [kind, ocp3, custom]'
    required: true
    default: 'kind'
  cluster-config-data:
    description: 'The JSON configuration of the cluster - required for custom cluster type only'
    required: false
  require-olm:
    description: 'If OLM is not available by default ensure that it is installed'
    default: false

runs:
  using: "composite"
  steps:
    - name: Override cluster type if there is a custom cluster-config
      shell: bash
      run: |
        if [ -n "${{ inputs.cluster-config-data }}" ]; then
          #
          # Have custom cluster-config-data so override cluster-type
          #
          echo "CLUSTER_TYPE=custom" >> $GITHUB_ENV
        else
          echo "Info: No cluster configuration supplied."
          echo "CLUSTER_TYPE=${{ inputs.cluster-type }}" >> $GITHUB_ENV
        fi

    - id: execute-kind
      name: Maybe Execute Kind Cluster
      uses: ./.github/actions/kamel-config-cluster-kind
      if: ${{ env.CLUSTER_TYPE == 'kind' }}

    - id: execute-ocp3
      name: Maybe Execute Minishift Cluster
      uses: ./.github/actions/kamel-config-cluster-ocp3
      if: ${{ env.CLUSTER_TYPE == 'ocp3' }}

    - id: execute-custom
      name: Maybe Execute Custom Cluster
      uses: ./.github/actions/kamel-config-cluster-custom
      if: ${{ env.CLUSTER_TYPE == 'custom' }}
      with:
        cluster-config-data: ${{ inputs.cluster-config-data }}

    - id: execute-invalid
      name: Execute Invalid Cluster
      if: ${{ env.CLUSTER_TYPE != 'kind' &&  env.CLUSTER_TYPE != 'ocp3' &&  env.CLUSTER_TYPE != 'custom' }}
      shell: bash
      run: |
        echo "Error: Unrecognised cluster request for type of cluster. Should be kind, ocp3 or custom."
        exit 1

    - id: image-namespace
      shell: bash
      env:
        DEFAULT_IMAGE_NAMESPACE: 'apache'
      run: |
        if [ -z "${{ env.CLUSTER_IMAGE_NAMESPACE }}" ]; then
          echo "CLUSTER_IMAGE_NAMESPACE=apache" >> $GITHUB_ENV
        fi

      #
      # Install opm if required
      #
    - id: install-opm
      name: Install opm if required
      shell: bash
      run: |
        if [ "${{ inputs.opm }}" == "true" ]; then
          curl -L https://github.com/operator-framework/operator-registry/releases/download/v1.19.5/linux-amd64-opm -o opm
          chmod +x opm
          sudo mv opm /usr/local/bin/
        fi

      #
      # Install OLM if required
      #
    - id: install-olm
      name: Install OLM
      shell: bash
      run: |
        if [ "${{ env.CLUSTER_HAS_OLM }}" == "true" ]; then
          # OLM already installed by default
          echo "OLM already available in cluster"
          exit 0
        fi

        if [ "${{ inputs.require-olm }}" != "true" ]; then
          # OLM not explicitly requested
          echo "OLM not explicity required for testing"
          echo "CLUSTER_HAS_OLM=false" >> $GITHUB_ENV
          exit 0
        fi

        #
        # Get current context
        #
        echo "Cache current kube context"
        ctx=$(kubectl config current-context)

        #
        # Need to be admin so switch to the admin context
        #
        echo "Change to kube admin context"
        kubectl config use-context "${{ env.CLUSTER_KUBE_ADMIN_USER_CTX }}"

        set +e
        echo "Check if OLM is already installed"
        kubectl get deployments --all-namespaces | grep olm-operator
        if [ $? != 0 ]; then
          set -e
          echo "OLM not detected on cluster so downloading and installing"
          kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.17.0/crds.yaml
          # wait for a while to be sure CRDs are installed
          sleep 1
          kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.17.0/olm.yaml
        fi
        set -e

        #
        # Change back to original context
        #
        echo "Return to original kube context"
        kubectl config use-context "${ctx}"

        echo "Complete"
        echo "CLUSTER_HAS_OLM=true" >> $GITHUB_ENV
