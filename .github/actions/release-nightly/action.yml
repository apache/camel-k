# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: release-nightly
description: 'action used to release nightly'

inputs:
  goVersionFile:
    required: true
    type: string
  javaVersion:
    required: true
    type: string
  # Make sure to treat the below values confidential (ie, not logging)
  secretE2ECluster:
    required: true
  secretE2EKube:
    required: true
  secretDockerHubUser:
    required: true
  secretDockerHubPassword:
    required: true
  secretGithubToken:
    required: true

runs:
  using: "composite"

  steps:

    - name: Install newer docker CLI supporting multi platform build
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Set up QEMU (required by multi platform build)
      uses: docker/setup-qemu-action@v3

    - name: Infra setting
      uses: ./.github/actions/infra-setting

    - name: Install operator
      shell: bash
      run: |
        kubectl create ns camel-k
        make install-k8s-global
        kubectl wait --for=jsonpath='{.status.phase}'=Ready itp camel-k -n camel-k --timeout=60s

    - name: Run test
      shell: bash
      run: |
        DO_TEST_PREBUILD=false GOTESTFMT="-json 2>&1 | gotestfmt" make test-common

    - name: Get nightly version and update date
      shell: bash
      run: |
        V="$(make get-version | sed s/-SNAPSHOT//)-nightly"
        D=$(date)
        echo "VERSION=$V" >> $GITHUB_ENV
        echo "UPD_DATE=$D" >> $GITHUB_ENV
        IMAGE_NAME=docker.io/${TEST_DOCKER_HUB_USERNAME:-testcamelk}/camel-k
        echo "Using IMAGE_NAME=$IMAGE_NAME"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Login to staging container registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.secretDockerHubUser }}
        password: ${{ inputs.secretDockerHubPassword }}

    - name: Build and release containers
      shell: bash
      run: |
        make VERSION=${{ env.VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} bundle release-helm images-nightly release-nightly

    - name: Build and push OLM bundle
      shell: bash
      run: |
        make VERSION=${{ env.VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} BUNDLE_IMAGE_NAME=docker.io/testcamelk/camel-k-bundle bundle-push

    - name: Generate SBOM
      uses: ./.github/actions/gh-go-mod-generate-sbom
      with:
        version: v1
        args: mod -licenses -json -output sbom.json

    - name: Commit and push nightly branch
      shell: bash
      env:
        CI_USER: "github-actions[bot]"
        CI_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
        CI_TOKEN: ${{ inputs.secretGithubToken }}
      run: |
        git config --local user.email "$CI_EMAIL"
        git config --local user.name "$CI_USER"
        git add docs/charts/
        git commit -am 'chore(ci): v${{ env.VERSION }} release updates' || echo "No nightly release updates changes to commit"
        echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV
        git tag v${{ env.VERSION }} $(git rev-parse HEAD)
        git push "https://$CI_USER:$CI_TOKEN@github.com/$GITHUB_REPOSITORY.git" tag v${{ env.VERSION }} -f || echo "No nightly release updates changes to push"

    - name: Delete existing release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=v${{ env.VERSION }}
        echo "Checking for existing release for tag $TAG..."

        RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$TAG")

        RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id // empty')

        if [ -n "$RELEASE_ID" ]; then
          echo "Release exists (ID=$RELEASE_ID). Deleting release and tag..."
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/$RELEASE_ID"

          git push --delete origin "$TAG"
          echo "Deleted existing release and tag $TAG."
        else
          echo "No existing release found for tag $TAG."
        fi

    - name: Create release and upload artifacts
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=v${{ env.VERSION }}
        FILES="./camel-k-client*.tar.gz sbom.json"
        echo "Creating new release for tag $TAG..."

        RELEASE_DATA=$(jq -n \
          --arg tag "$TAG" \
          --arg name "Release $TAG" \
          --arg body "Release notes go here" \
          '{ tag_name: $tag, name: $name, body: $body, draft: false, prerelease: true }')

        RELEASE_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
          -d "$RELEASE_DATA")

        UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r .upload_url | sed -e "s/{?name,label}//")

        for FILE in $FILES; do
          if [ -f "$FILE" ]; then
            FILE_NAME=$(basename "$FILE")
            echo "Uploading $FILE_NAME..."
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$FILE" \
              "$UPLOAD_URL?name=$FILE_NAME"
          else
            echo "File $FILE not found, skipping."
          fi
        done

        echo "Release $TAG created successfully with artifacts."
