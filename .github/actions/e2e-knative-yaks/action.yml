# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: e2e-knative-yaks
description: 'End-to-End tests for knative use-cases using yaks'

inputs:
  cluster-config-data:
    description: 'The configuration of the underlying cluster (if cluster-type is custom)'
    required: false
  cluster-kube-config-data:
    description: 'Base16 encoded kube config - required for custom cluster type only'
    required: false

runs:
  using: "composite"

  steps:
  - id: prepare-env
    name: Prepare Test Environment
    uses: ./.github/actions/kamel-prepare-env

  - id: config-cluster
    name: Configure Platform
    uses: ./.github/actions/kamel-config-cluster
    with:
      cluster-type: ${{ env.TEST_CLUSTER }}
      cluster-config-data: ${{ inputs.cluster-config-data }}
      cluster-kube-config-data: ${{ inputs.cluster-kube-config-data }}

  - name: Install YAKS
    uses: ./.github/actions/kamel-install-yaks

  - name: Install Knative
    uses: ./.github/actions/kamel-install-knative

  - id: build-kamel
    name: Build Kamel
    uses: ./.github/actions/kamel-build
    with:
      image-registry-push-host: ${{ steps.config-cluster.outputs.cluster-image-registry-push-host }}
      image-registry-pull-host: ${{ steps.config-cluster.outputs.cluster-image-registry-pull-host }}
      image-namespace: ${{ steps.config-cluster.outputs.cluster-image-namespace }}
      # Builds the bundle if an OLM is available - depends on cluster being tested
      build-bundle: ${{ steps.config-cluster.outputs.cluster-has-olm }}
      # Can be empty and so catalog source will not be created
      catalog-source-namespace: ${{ steps.config-cluster.outputs.cluster-catalog-source-namespace }}

  - id: install-kamel-cluster-setup
    name: Install Kamel Cluster Setup
    uses: ./.github/actions/kamel-install-cluster-setup
    with:
      kube-admin-user-ctx: ${{ steps.config-cluster.outputs.cluster-kube-admin-user-ctx }}

  - id: run-it
    name: Run IT
    shell: bash
    run: |
      # Cluster environment
      export CUSTOM_IMAGE=${{ steps.build-kamel.outputs.build-binary-local-image-name }}
      export CUSTOM_VERSION=${{ steps.build-kamel.outputs.build-binary-local-image-version }}

      #
      # If bundle has been built and installed then use it
      #
      if [ -n "${{ steps.build-kamel.outputs.build-bundle-catalog-source-name }}" ]; then
        export KAMEL_INSTALL_OLM_SOURCE_NAMESPACE=${{ steps.config-cluster.outputs.cluster-image-namespace }}
        export KAMEL_INSTALL_OLM_SOURCE=${{ steps.build-kamel.outputs.build-bundle-catalog-source-name }}
      fi

      export KAMEL_INSTALL_REGISTRY=${{ steps.config-cluster.outputs.cluster-image-registry-pull-host }}
      export KAMEL_INSTALL_REGISTRY_INSECURE=${{steps.config-cluster.outputs.cluster-image-registry-insecure }}
      export KAMEL_INSTALL_OPERATOR_IMAGE=${CUSTOM_IMAGE}:${CUSTOM_VERSION}
      export CAMEL_K_TEST_IMAGE_NAME=${CUSTOM_IMAGE}
      export CAMEL_K_TEST_IMAGE_VERSION=${CUSTOM_VERSION}

      # Test options
      export KAMEL_INSTALL_MAVEN_REPOSITORIES=$(make get-staging-repo)
      export KAMEL_INSTALL_OPERATOR_ENV_VARS=KAMEL_INSTALL_DEFAULT_KAMELETS=false
      export CAMEL_K_TEST_SAVE_FAILED_TEST_NAMESPACE=${{ env.CAMEL_K_TEST_SAVE_FAILED_TEST_NAMESPACE }}

      # Install Yaks globally
      yaks install

      # Then run integration tests
      yaks test e2e/yaks/common

  - name: Cleanup
    uses: ./.github/actions/kamel-cleanup
    if: ${{ always() }}
    with:
      build-bundle-catalog-source: ${{ steps.build-kamel.outputs.build-bundle-catalog-source-name }}
