# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: e2e-upgrade
description: 'End-to-End tests for upgrading to new version'

inputs:
  platform-config:
    description: 'The configuration of the underlying cluster (if cluster-type is custom)'
    required: false

runs:
  using: "composite"

  steps:
  - id: prepare-env
    name: Prepare Test Environment
    uses: ./.github/actions/kamel-prepare-env
    with:
      install-opm: true

  - id: configure-platform
    name: Configure Platform
    uses: ./.github/actions/kamel-config-cluster
    with:
      cluster-type: ${{ steps.prepare-env.outputs.cluster-platform }}
      platform-config: ${{ inputs.platform-config }}

  - name: Get Released Kamel CLI
    shell: bash
    run: |
      export KAMEL_VERSION=$(make get-last-released-version)
      curl -L https://github.com/apache/camel-k/releases/download/v${KAMEL_VERSION}/camel-k-client-${KAMEL_VERSION}-linux-64bit.tar.gz -o /tmp/kamel.tar.gz
      pushd /tmp && tar -zxf kamel.tar.gz && popd > /dev/null
      if [ ! -x /tmp/kamel ]; then
        echo "Error: No ${KAMEL_VERSION} downloaded correctly"
        exit 1
      fi

      #
      # Note: cannot use GITHUB_ENV vars is same script as it was defined
      #
      export RELEASED_KAMEL_BINARY=/tmp/kamel-${KAMEL_VERSION}
      echo "RELEASED_KAMEL_BINARY=${RELEASED_KAMEL_BINARY}" >> $GITHUB_ENV
      mv /tmp/kamel ${RELEASED_KAMEL_BINARY}
      if [ $? == 0 ]; then
        echo "Info: Kamel version installed: $(${RELEASED_KAMEL_BINARY} version)"
      else
        echo "Error: Failed to install kamel binary ${KAMEL_VERSION}"
        exit 1
      fi

  - id: build-kamel-binary
    name: Build Kamel Binary
    uses: ./.github/actions/kamel-build
    with:
      image-registry-push-host: ${{ steps.configure-platform.outputs.image-registry-push-host }}
      image-registry-pull-host: ${{ steps.configure-platform.outputs.image-registry-pull-host }}
      image-namespace: ${{ steps.configure-platform.outputs.image-namespace }}
      # Avoid overwriting last-released version of binary
      install-kamel-binary: false

  - id: build-kamel-bundle
    name: Build Kamel Metadata Bundle
    uses: ./.github/actions/kamel-build-bundle
    with:
      image-registry-push-host: ${{ steps.configure-platform.outputs.image-registry-push-host }}
      image-registry-pull-host: ${{ steps.configure-platform.outputs.image-registry-pull-host }}
      image-namespace: ${{ steps.configure-platform.outputs.image-namespace }}
      local-image-name: ${{ steps.build-kamel-binary.outputs.local-image-name }}
      local-image-version: ${{ steps.build-kamel-binary.outputs.local-image-version }}

  - name: Run IT
    shell: bash
    run: |
      # Use the last released Kamel CLI
      export RELEASED_KAMEL_BIN=${{ env.RELEASED_KAMEL_BINARY }}

      echo "Kamel version: $(${RELEASED_KAMEL_BIN} version)"

      # Configure install options
      export CUSTOM_IMAGE=${{ steps.build-kamel-binary.outputs.local-image-name }}
      export CUSTOM_VERSION=${{ steps.build-kamel-binary.outputs.local-image-version }}
      export KAMEL_INSTALL_MAVEN_REPOSITORIES=$(make get-staging-repo)
      export KAMEL_INSTALL_REGISTRY=${{ steps.configure-platform.outputs.image-registry-pull-host }}
      export KAMEL_INSTALL_REGISTRY_INSECURE=${{ steps.configure-platform.outputs.image-registry-insecure }}

      # Configure test options
      export CAMEL_K_PREV_IIB=quay.io/operatorhubio/catalog:latest
      export CAMEL_K_NEW_IIB=${{ steps.build-kamel-bundle.outputs.local-image-bundle-index }}
      export KAMEL_K_TEST_RELEASE_VERSION=$(make get-last-released-version)
      export KAMEL_K_TEST_OPERATOR_CURRENT_IMAGE=${CUSTOM_IMAGE}:${CUSTOM_VERSION}

      # Then run integration tests
      make test-upgrade
