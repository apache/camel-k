# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: e2e-upgrade
description: 'End-to-End tests for upgrading to new version'

inputs:
  cluster-config-data:
    description: 'The configuration of the underlying cluster (if cluster-type is custom)'
    required: false
  cluster-kube-config-data:
    description: 'Base16 encoded kube config - required for custom cluster type only'
    required: false

runs:
  using: "composite"

  steps:
  - id: prepare-env
    name: Prepare Test Environment
    uses: ./.github/actions/kamel-prepare-env

  - id: config-cluster
    name: Configure Cluster
    uses: ./.github/actions/kamel-config-cluster
    with:
      cluster-type: ${{ env.TEST_CLUSTER }}
      cluster-config-data: ${{ inputs.cluster-config-data }}
      cluster-kube-config-data: ${{ inputs.cluster-kube-config-data }}
      require-olm: true

  - id: released-kamel-cli
    name: Get Released Kamel CLI
    shell: bash
    run: |
      export KAMEL_VERSION=$(make get-last-released-version)
      curl -L https://github.com/apache/camel-k/releases/download/v${KAMEL_VERSION}/camel-k-client-${KAMEL_VERSION}-linux-64bit.tar.gz -o /tmp/kamel.tar.gz
      pushd /tmp && tar -zxf kamel.tar.gz && popd > /dev/null
      if [ ! -x /tmp/kamel ]; then
        echo "Error: No ${KAMEL_VERSION} downloaded correctly"
        exit 1
      fi

      #
      # Note: cannot use GITHUB_ENV vars in same script as it was defined
      #
      export RELEASED_KAMEL_BINARY=/tmp/kamel-${KAMEL_VERSION}
      mv /tmp/kamel ${RELEASED_KAMEL_BINARY}
      if [ $? == 0 ]; then
        echo "Info: Kamel version installed: $(${RELEASED_KAMEL_BINARY} version)"
        echo "::set-output name=released-kamel-binary::${RELEASED_KAMEL_BINARY}"
      else
        echo "Error: Failed to install kamel binary ${KAMEL_VERSION}"
        exit 1
      fi

  - id: build-kamel
    name: Build Kamel
    uses: ./.github/actions/kamel-build
    with:
      image-registry-push-host: ${{ steps.config-cluster.outputs.cluster-image-registry-push-host }}
      image-registry-pull-host: ${{ steps.config-cluster.outputs.cluster-image-registry-pull-host }}
      image-namespace: ${{ steps.config-cluster.outputs.cluster-image-namespace }}
      # Builds the bundle if an OLM is available.
      # Since configure-cluster requires OLM then this should be true
      build-bundle: ${{ steps.config-cluster.outputs.cluster-has-olm }}
      # Can be empty and so catalog source will not be created
      catalog-source-namespace: ${{ steps.config-cluster.outputs.cluster-catalog-source-namespace }}

  - name: Run IT
    shell: bash
    run: |
      # Use the last released Kamel CLI
      export RELEASED_KAMEL_BIN=${{ steps.released-kamel-cli.outputs.released-kamel-binary }}

      echo "Kamel version: $(${RELEASED_KAMEL_BIN} version)"

      # Configure install options
      export CUSTOM_IMAGE=${{ steps.build-kamel.outputs.build-binary-local-image-name }}
      export CUSTOM_VERSION=${{ steps.build-kamel.outputs.build-binary-local-image-version }}
      export KAMEL_INSTALL_MAVEN_REPOSITORIES=$(make get-staging-repo)
      export KAMEL_INSTALL_REGISTRY=${{ steps.config-cluster.outputs.cluster-image-registry-pull-host }}
      export KAMEL_INSTALL_REGISTRY_INSECURE=${{steps.config-cluster.outputs.cluster-image-registry-insecure }}

      # Despite building a bundle we don't want it installed immediately so no OLM_INDEX_BUNDLE var

      # Configure test options
      export CAMEL_K_PREV_IIB=quay.io/operatorhubio/catalog:latest
      export CAMEL_K_NEW_IIB=${{ steps.build-kamel.outputs.build-bundle-image-bundle-index }}
      export KAMEL_K_TEST_RELEASE_VERSION=$(make get-last-released-version)
      export KAMEL_K_TEST_OPERATOR_CURRENT_IMAGE=${CUSTOM_IMAGE}:${CUSTOM_VERSION}
      export CAMEL_K_TEST_SAVE_FAILED_TEST_NAMESPACE=${{ env.CAMEL_K_TEST_SAVE_FAILED_TEST_NAMESPACE }}

      # Then run integration tests
      make test-upgrade

  - name: Cleanup
    uses: ./.github/actions/kamel-cleanup
    if: ${{ always() }}
    with:
      build-bundle-catalog-source: ${{ steps.build-kamel.outputs.build-bundle-catalog-source-name }}
