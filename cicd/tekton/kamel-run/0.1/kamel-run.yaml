apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kamel-run
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: cli
    tekton.dev/platforms: "linux/amd64"
    tekton.dev/displayName: "kamel run"
spec:
  description: >-
    Run a Camel Integration

    Kamel-run task creates a Camel K Integration which will be taken and operated by Camel K operator. You can either use this task to
    run a build from source or build the application in previous tasks and use this last task to deploy and let Camel K operates it.
  params:
    - name: camel-k-image
      description: The location of Camel K CLI image.
      default: docker.io/apache/camel-k:1.12.0
    - name: filename
      description: the Integration source we want to run
    - name: namespace
      description: the namespace where to run the integration
      default: ""
    - name: container-image
      description: the custom container image to use (if the build was performed as part of previous tasks)
      default: ""
    - name: wait
      description: wait for the Integration to run before exiting the task
      default: "false"
  results:
    - name: integration-name
      description: The name of the integration created
    - name: integration-phase
      description: The phase of the integration created (when used with input `wait` parameter)
  workspaces:
  - name: source
  steps:
  - name: execute
    image: $(params.camel-k-image)
    workingDir: $(workspaces.source.path)
    script: |
      #!/usr/bin/env bash

      KAMEL_RUN_ARGS="$(params.filename)"
      [[ ! "$(params.namespace)" == "" ]] && KAMEL_RUN_ARGS="$KAMEL_RUN_ARGS -n $(params.namespace)"
      [[ ! "$(params.container-image)" == "" ]] && KAMEL_RUN_ARGS="$KAMEL_RUN_ARGS -t container.image=$(params.container-image)"
      [[ "$(params.wait)" == "true" ]] && KAMEL_RUN_ARGS="$KAMEL_RUN_ARGS --wait"
      kamel_output=$(kamel run "$KAMEL_RUN_ARGS")
      echo "$kamel_output"
      # Let's use the output produced to scrape the integration name and phase
      echo "$kamel_output" | grep -oP 'Integration ".*?" (updated|created|unchanged)' | awk -F ' ' '{print $2}' | sed "s/\"//g" | tr -d '\n' | tee "$(results.integration-name.path)"
      kamel get "$(cat "$(results.integration-name.path)")" 2>/dev/null | tail -n +2 | awk -F ' ' '{print $2}' | tee "$(results.integration-phase.path)"